module test_mo_errormeasures
  
  use funit
  use mo_kind         , only: i4, sp, dp
  use mo_errorMeasures, only: BIAS, KGE, KGEnocorr, LNNSE, MAE, MSE, NSE, wNSE, RMSE, SAE, SSE
  use mo_message, only: error_message
  use mo_moment, only: stddev, average
  
  implicit none

  integer(i4)                 :: i, j, k
  real(dp), dimension(54)     :: vec1, vec2
  real(dp), dimension(9,6,8)  :: arr1, arr2
  logical,  dimension(54)     :: maskvec
  logical,  dimension(9,6,8)  :: mask

contains

  @test
  subroutine errormeasures_initial()

    write(*,*) ''
    write(*,*) 'Test mo_errormeasures.f90'
    !
    ! read random mask - shape = (6,9,5)
    !open(unit=20, file='field_maskf90.dat', action='read', status='old')
    open(unit=20, file='./files/field_maskf90.dat', action='read', status='old')
    do k = 1, size(arr1, dim=3)
      do i = 1, size(arr1, dim=1)
          read(20,*) (mask(i,j,k), j=1, size(arr1, dim=2))
      end do
    end do
    close(20)
    ! read random number array - shape = (6,9,5)
    !open(unit=20, file='field.dat', action='read', status='old')
    open(unit=20, file='./files/field.dat', action='read', status='old')
    do k = 1, size(arr1, dim=3)
      do i = 1, size(arr1, dim=1)
          read(20,*) (arr1(i,j,k), j=1, size(arr1, dim=2))
      end do
      arr2(:,:,k) = arr1(:,:,k) + real(k, dp) / 5.0_dp
    end do
    close(20)
    !
    ! create example for 1D
    vec1     = reshape(arr1(:,:,1), (/size(arr1, dim=1)*size(arr1, dim=2)/))
    vec2     = reshape(arr1(:,:,2), (/size(arr1, dim=1)*size(arr1, dim=2)/))
    maskvec  = reshape(mask(:,:,1), (/size(mask, dim=1)*size(mask, dim=2)/))

  end subroutine errormeasures_initial

  ! Test Bias (order: sp-dp, 1D-2D-3D)
  @test
  subroutine test_error_bias()

    ! With mask
    @assertEqual(nint(10000._sp*BIAS(real(vec1, sp), real(vec2, sp), mask=maskvec)), 14353)
    @assertEqual(nint(10000._dp*BIAS(vec1, vec2, mask=maskvec)), 14353)
    @assertEqual(nint(10000._sp*BIAS(real(arr1(:,:,1), sp), real(arr2(:,:,4), sp), mask=mask(:,:,1))), 20813)
    @assertEqual(nint(10000._dp*BIAS(arr1(:,:,1), arr2(:,:,4), mask=mask(:,:,1))), 20813)
    @assertEqual(nint(10000._sp*BIAS(real(arr1, sp), real(arr2, sp), mask=mask)), 9097)
    @assertEqual(nint(10000._dp*BIAS(arr1, arr2, mask=mask)), 9097)

    ! Without mask
    @assertEqual(nint(10000._sp*BIAS(real(vec1, sp), real(vec2, sp))), -14040)
    @assertEqual(nint(10000._dp*BIAS(vec1, vec2)), -14040)
    @assertEqual(nint(10000._sp*BIAS(real(arr1(:,:,1), sp), real(arr2(:,:,4), sp))), -5995)
    @assertEqual(nint(10000._dp*BIAS(arr1(:,:,1), arr2(:,:,4))), -5995)
    @assertEqual(nint(10000._sp*BIAS(real(arr1, sp), real(arr2, sp))), 9000)
    @assertEqual(nint(10000._dp*BIAS(arr1, arr2)), 9000)
    
  end subroutine test_error_bias

  ! Test KGE (order: sp-dp, 1D-2D-3D)
  @test
  subroutine test_error_kge()
  
    ! With mask
    @assertEqual(nint(10000._sp*KGE(real(vec1, sp), real(vec2, sp), mask=maskvec)), 1783)
    @assertEqual(nint(10000._dp*KGE(vec1, vec2, mask=maskvec)), 1783)
    @assertEqual(nint(10000._sp*KGE(real(arr1(:,:,1), sp), real(arr2(:,:,4), sp), mask=mask(:,:,1))), -4730)
    @assertEqual(nint(10000._dp*KGE(arr1(:,:,1), arr2(:,:,4), mask=mask(:,:,1))), -4730)
    @assertEqual(nint(10000._sp*KGE(real(arr1, sp), real(arr2, sp), mask=mask)), 7631)
    @assertEqual(nint(10000._dp*KGE(arr1, arr2, mask=mask)), 7631)

    ! Without mask
    @assertEqual(nint(10000._sp*KGE(real(vec1, sp), real(vec2, sp))), -1305)
    @assertEqual(nint(10000._dp*KGE(vec1, vec2)), -1305)
    @assertEqual(nint(10000._sp*KGE(real(arr1(:,:,1), sp), real(arr2(:,:,4), sp))), -4589)
    @assertEqual(nint(10000._dp*KGE(arr1(:,:,1), arr2(:,:,4))), -4589)
    @assertEqual(nint(10000._sp*KGE(real(arr1, sp), real(arr2, sp))), 8306)
    @assertEqual(nint(10000._dp*KGE(arr1, arr2)), 8306)
    
  end subroutine test_error_kge

  ! Test KGEnocorr (order: sp-dp, 1D-2D-3D)
  @test
  subroutine test_error_kgenocorr()
  
    ! With mask
    @assertEqual(nint(10000._sp*KGEnocorr(real(vec1, sp), real(vec2, sp), mask=maskvec)), 3867)
    @assertEqual(nint(10000._dp*KGEnocorr(vec1, vec2, mask=maskvec)), 3867)
    @assertEqual(nint(10000._sp*KGEnocorr(real(arr1(:,:,1), sp), real(arr2(:,:,4), sp), mask=mask(:,:,1))), -224)
    @assertEqual(nint(10000._dp*KGEnocorr(arr1(:,:,1), arr2(:,:,4), mask=mask(:,:,1))), -224)
    @assertEqual(nint(10000._sp*KGEnocorr(real(arr1, sp), real(arr2, sp), mask=mask)), 7631)
    @assertEqual(nint(10000._dp*KGEnocorr(arr1, arr2, mask=mask)), 7631)

    ! Without mask
    @assertEqual(nint(10000._sp*KGEnocorr(real(vec1, sp), real(vec2, sp))), 5066)
    @assertEqual(nint(10000._dp*KGEnocorr(vec1, vec2)), 5066)
    @assertEqual(nint(10000._sp*KGEnocorr(real(arr1(:,:,1), sp), real(arr2(:,:,4), sp))), 887)
    @assertEqual(nint(10000._dp*KGEnocorr(arr1(:,:,1), arr2(:,:,4))), 887)
    @assertEqual(nint(10000._sp*KGEnocorr(real(arr1, sp), real(arr2, sp))), 8307)
    @assertEqual(nint(10000._dp*KGEnocorr(arr1, arr2)), 8307)

  end subroutine test_error_kgenocorr

  ! Test MAE (order: sp-dp, 1D-2D-3D)
  @test
  subroutine test_error_mae()
  
    ! With mask
    @assertEqual(nint(10000._sp*MAE(real(vec1, sp), real(vec2, sp), mask=maskvec)), 16123)
    @assertEqual(nint(10000._dp*MAE(vec1, vec2, mask=maskvec)), 16123)
    @assertEqual(nint(10000._sp*MAE(real(arr1(:,:,1), sp), real(arr2(:,:,4), sp), mask=mask(:,:,1))), 21134)
    @assertEqual(nint(10000._dp*MAE(arr1(:,:,1), arr2(:,:,4), mask=mask(:,:,1))), 21134)
    @assertEqual(nint(10000._sp*MAE(real(arr1, sp), real(arr2, sp), mask=mask)), 9097)
    @assertEqual(nint(10000._dp*MAE(arr1, arr2, mask=mask)), 9097)

    ! Without mask
    

  end subroutine test_error_mae

  ! Test MSE (order: sp-dp, 1D-2D-3D)
  @test
  subroutine test_error_mse()
  
    @assertEqual(nint(10000._sp*MSE(real(vec1, sp), real(vec2, sp), mask=maskvec)), 42183)
    @assertEqual(nint(10000._dp*MSE(vec1, vec2, mask=maskvec)), 42183)
    @assertEqual(nint(10000._sp*MSE(real(arr1(:,:,1), sp), real(arr2(:,:,4), sp), mask=mask(:,:,1))), 56920)
    @assertEqual(nint(10000._dp*MSE(arr1(:,:,1), arr2(:,:,4), mask=mask(:,:,1))), 56920)
    @assertEqual(nint(10000._sp*MSE(real(arr1, sp), real(arr2, sp), mask=mask)), 10287)
    @assertEqual(nint(10000._dp*MSE(arr1, arr2, mask=mask)), 10287)

  end subroutine test_error_mse

  ! Test NSE (order: sp-dp, 1D-2D-3D)
  @test
  subroutine test_error_nse()
  
    @assertEqual(nint(10000._sp*NSE(real(vec1, sp), real(vec2, sp), mask=maskvec)), -23368)
    @assertEqual(nint(10000._dp*NSE(vec1, vec2, mask=maskvec)), -23368)
    @assertEqual(nint(10000._sp*NSE(real(arr1(:,:,1), sp), real(arr2(:,:,4), sp), mask=mask(:,:,1))), -35026)
    @assertEqual(nint(10000._dp*NSE(arr1(:,:,1), arr2(:,:,4), mask=mask(:,:,1))), -35026)
    @assertEqual(nint(10000._sp*NSE(real(arr1, sp), real(arr2, sp), mask=mask)), 8164)
    @assertEqual(nint(10000._dp*NSE(arr1, arr2, mask=mask)), 8164)

  end subroutine test_error_nse

  ! Test weighted NSE (order: sp-dp, 1D-2D-3D)
  @test
  subroutine test_error_wnse()
  
    ! With mask
    @assertEqual(nint(10000._sp*wNSE(real(vec1, sp), real(vec2, sp), mask=maskvec)), -18952)
    @assertEqual(nint(10000._dp*wNSE(vec1, vec2, mask=maskvec)), -18952)
    @assertEqual(nint(10000._sp*wNSE(real(arr1(:,:,1), sp), real(arr2(:,:,4), sp), mask=mask(:,:,1))), -20760)
    @assertEqual(nint(10000._dp*wNSE(arr1(:,:,1), arr2(:,:,4), mask=mask(:,:,1))), -20760)
    @assertEqual(nint(10000._sp*wNSE(real(arr1, sp), real(arr2, sp), mask=mask)), 7876)
    @assertEqual(nint(10000._dp*wNSE(arr1, arr2, mask=mask)), 7876)

    ! Without mask
    @assertEqual(nint(10000._sp*wNSE(real(vec1, sp), real(vec2, sp))), -12210)
    @assertEqual(nint(10000._dp*wNSE(vec1, vec2)), -12210)
    @assertEqual(nint(10000._sp*wNSE(real(arr1(:,:,1), sp), real(arr2(:,:,4), sp))), -3059)
    @assertEqual(nint(10000._dp*wNSE(arr1(:,:,1), arr2(:,:,4))), -3058)
    @assertEqual(nint(10000._sp*wNSE(real(arr1, sp), real(arr2, sp))), 8919)
    @assertEqual(nint(10000._dp*wNSE(arr1, arr2)), 8919)

  end subroutine test_error_wnse

  ! Test SAE (order: sp-dp, 1D-2D-3D)
  @test
  subroutine test_error_sae()
  
    @assertEqual(nint(10000._sp*SAE(real(vec1, sp), real(vec2, sp), mask=maskvec)), 403063)
    @assertEqual(nint(10000._dp*SAE(vec1, vec2, mask=maskvec)), 403063)
    @assertEqual(nint(10000._sp*SAE(real(arr1(:,:,1), sp), real(arr2(:,:,4), sp), mask=mask(:,:,1))), 528359)
    @assertEqual(nint(10000._dp*SAE(arr1(:,:,1), arr2(:,:,4), mask=mask(:,:,1))), 528359)
    @assertEqual(nint(10000._sp*SAE(real(arr1, sp), real(arr2, sp), mask=mask)), 2055999)
    @assertEqual(nint(10000._dp*SAE(arr1, arr2, mask=mask)), 2056000)

  end subroutine test_error_sae

  ! Test SSE (order: sp-dp, 1D-2D-3D)
  @test
  subroutine test_error_sse()
  
    @assertEqual(nint(10000._sp*SSE(real(vec1, sp), real(vec2, sp), mask=maskvec)), 1054575)
    @assertEqual(nint(10000._dp*SSE(vec1, vec2, mask=maskvec)), 1054575)
    @assertEqual(nint(10000._sp*SSE(real(arr1(:,:,1), sp), real(arr2(:,:,4), sp), mask=mask(:,:,1))), 1423003)
    @assertEqual(nint(10000._dp*SSE(arr1(:,:,1), arr2(:,:,4), mask=mask(:,:,1))), 1423003)
    @assertEqual(nint(10000._sp*SSE(real(arr1, sp), real(arr2, sp), mask=mask)), 2324799)
    @assertEqual(nint(10000._dp*SSE(arr1, arr2, mask=mask)), 2324800)

  end subroutine test_error_sse

  ! Test RMSE (order: sp-dp, 1D-2D-3D)
  @test
  subroutine test_error_rmse()
  
    @assertEqual(nint(10000._sp*RMSE(real(vec1, sp), real(vec2, sp), mask=maskvec)), 20538)
    @assertEqual(nint(10000._dp*RMSE(vec1, vec2, mask=maskvec)), 20538)
    @assertEqual(nint(10000._sp*RMSE(real(arr1(:,:,1), sp), real(arr2(:,:,4), sp), mask=mask(:,:,1))), 23858)
    @assertEqual(nint(10000._dp*RMSE(arr1(:,:,1), arr2(:,:,4), mask=mask(:,:,1))), 23858)
    @assertEqual(nint(10000._sp*RMSE(real(arr1, sp), real(arr2, sp), mask=mask)), 10142)
    @assertEqual(nint(10000._dp*RMSE(arr1, arr2, mask=mask)), 10142)

  end subroutine test_error_rmse

  ! Test LNNSE (order: sp-dp, 1D-2D-3D)
  @test
  subroutine test_error_lnnse()
  
    @assertEqual(nint(10000._sp*LNNSE(real(vec1, sp), real(vec2, sp), mask=maskvec)), -8993)
    @assertEqual(nint(10000._dp*LNNSE(vec1, vec2, mask=maskvec)), -8993)
    @assertEqual(nint(10000._sp*LNNSE(real(arr1(:,:,1), sp), real(arr2(:,:,4), sp), mask=mask(:,:,1))), -21656)
    @assertEqual(nint(10000._dp*LNNSE(arr1(:,:,1), arr2(:,:,4), mask=mask(:,:,1))), -21656)
    @assertEqual(nint(10000._sp*LNNSE(real(arr1, sp), real(arr2, sp), mask=mask)), 8915)
    @assertEqual(nint(10000._dp*LNNSE(arr1, arr2, mask=mask)), 8915)

  end subroutine test_error_lnnse

end module test_mo_errormeasures