module test_mo_errormeasures
  
  use funit
  use mo_kind         , only: i4, sp, dp
  use mo_errorMeasures, only: BIAS, KGE, KGEnocorr, LNNSE, MAE, MSE, NSE, wNSE, RMSE, SAE, SSE
  use mo_message, only: error_message
  use mo_moment, only: stddev, average
  
  implicit none

  real(dp)                    :: t_dp
  real(sp)                    :: t_sp
  real(dp), dimension(54)     :: vec1, vec2
  real(dp), dimension(9,6,8)  :: arr1, arr2
  logical,  dimension(54)     :: maskvec
  logical,  dimension(9,6,8)  :: mask

contains

  @test
  subroutine errormeasures_initial()

    integer(i4)                 :: i, j, k

    write(*,*) ''
    write(*,*) 'Test mo_errormeasures.f90'
    !
    ! read random mask - shape = (6,9,5)
    !open(unit=20, file='field_maskf90.dat', action='read', status='old')
    open(unit=20, file='./files/field_maskf90.dat', action='read', status='old')
    do k = 1, size(arr1, dim=3)
      do i = 1, size(arr1, dim=1)
          read(20,*) (mask(i,j,k), j=1, size(arr1, dim=2))
      end do
    end do
    close(20)
    ! read random number array - shape = (6,9,5)
    !open(unit=20, file='field.dat', action='read', status='old')
    open(unit=20, file='./files/field.dat', action='read', status='old')
    do k = 1, size(arr1, dim=3)
      do i = 1, size(arr1, dim=1)
          read(20,*) (arr1(i,j,k), j=1, size(arr1, dim=2))
      end do
      arr2(:,:,k) = arr1(:,:,k) + real(k, dp) / 5.0_dp
    end do
    close(20)
    !
    ! create example for 1D
    vec1     = reshape(arr1(:,:,1), (/size(arr1, dim=1)*size(arr1, dim=2)/))
    vec2     = reshape(arr1(:,:,2), (/size(arr1, dim=1)*size(arr1, dim=2)/))
    maskvec  = reshape(mask(:,:,1), (/size(mask, dim=1)*size(mask, dim=2)/))
    t_dp     = 1.e-4_dp
    t_sp     = 1.e-4_sp

  end subroutine errormeasures_initial

  ! Test Bias (order: sp-dp, 1D-2D-3D)
  @test
  subroutine test_error_bias()

    ! With mask
    @assertEqual(BIAS(real(vec1, sp), real(vec2, sp), mask=maskvec), 1.4353_sp, tolerance = t_sp)
    @assertEqual(BIAS(vec1, vec2, mask=maskvec), 1.4353_dp, tolerance = t_dp)
    @assertEqual(BIAS(real(arr1(:,:,1), sp), real(arr2(:,:,4), sp), mask=mask(:,:,1)), 2.0813_sp, tolerance = t_sp)
    @assertEqual(BIAS(arr1(:,:,1), arr2(:,:,4), mask=mask(:,:,1)), 2.0813_dp, tolerance = t_dp)
    @assertEqual(BIAS(real(arr1, sp), real(arr2, sp), mask=mask), 0.9097_sp, tolerance = t_sp)
    @assertEqual(BIAS(arr1, arr2, mask=mask), 0.9097_dp, tolerance = t_dp)

    ! Without mask
    @assertEqual(BIAS(real(vec1, sp), real(vec2, sp)), -1.4040_sp, tolerance = t_sp)
    @assertEqual(BIAS(vec1, vec2), -1.4040_dp, tolerance = t_dp)
    @assertEqual(BIAS(real(arr1(:,:,1), sp), real(arr2(:,:,4), sp)), -0.5995_sp, tolerance = t_sp)
    @assertEqual(BIAS(arr1(:,:,1), arr2(:,:,4)), -0.5995_dp, tolerance = t_dp)
    @assertEqual(BIAS(real(arr1, sp), real(arr2, sp)), 0.9000_sp, tolerance = t_sp)
    @assertEqual(BIAS(arr1, arr2), 0.9000_dp, tolerance = t_dp)
    
  end subroutine test_error_bias

  ! Test KGE (order: sp-dp, 1D-2D-3D)
  @test
  subroutine test_error_kge()
  
    ! With mask
    @assertEqual(KGE(real(vec1, sp), real(vec2, sp), mask=maskvec), 0.1783_sp, tolerance = t_sp)
    @assertEqual(KGE(vec1, vec2, mask=maskvec), 0.1783_dp, tolerance = t_dp)
    @assertEqual(KGE(real(arr1(:,:,1), sp), real(arr2(:,:,4), sp), mask=mask(:,:,1)), -0.4730_sp, tolerance = t_sp)
    @assertEqual(KGE(arr1(:,:,1), arr2(:,:,4), mask=mask(:,:,1)), -0.4730_dp, tolerance = t_dp)
    @assertEqual(KGE(real(arr1, sp), real(arr2, sp), mask=mask), 0.7631_sp, tolerance = t_sp)
    @assertEqual(KGE(arr1, arr2, mask=mask), 0.7631_dp, tolerance = t_dp)

    ! Without mask
    @assertEqual(KGE(real(vec1, sp), real(vec2, sp)), -0.1305_sp, tolerance = t_sp)
    @assertEqual(KGE(vec1, vec2), -0.1305_dp, tolerance = t_dp)
    @assertEqual(KGE(real(arr1(:,:,1), sp), real(arr2(:,:,4), sp)), -0.4589_sp, tolerance = t_sp)
    @assertEqual(KGE(arr1(:,:,1), arr2(:,:,4)), -0.4589_dp, tolerance = t_dp)
    @assertEqual(KGE(real(arr1, sp), real(arr2, sp)), 0.8306_sp, tolerance = t_sp)
    @assertEqual(KGE(arr1, arr2), 0.8306_dp, tolerance = t_dp)
    
  end subroutine test_error_kge

  ! Test KGEnocorr (order: sp-dp, 1D-2D-3D)
  @test
  subroutine test_error_kgenocorr()
  
    ! With mask
    @assertEqual(KGEnocorr(real(vec1, sp), real(vec2, sp), mask=maskvec), 0.3867_sp, tolerance = t_sp)
    @assertEqual(KGEnocorr(vec1, vec2, mask=maskvec), 0.3867_dp, tolerance = t_dp)
    @assertEqual(KGEnocorr(real(arr1(:,:,1), sp), real(arr2(:,:,4), sp), mask=mask(:,:,1)), -0.0224_sp, tolerance = t_sp)
    @assertEqual(KGEnocorr(arr1(:,:,1), arr2(:,:,4), mask=mask(:,:,1)), -0.0224_dp, tolerance = t_dp)
    @assertEqual(KGEnocorr(real(arr1, sp), real(arr2, sp), mask=mask), 0.7631_sp, tolerance = t_sp)
    @assertEqual(KGEnocorr(arr1, arr2, mask=mask), 0.7631_dp, tolerance = t_dp)

    ! Without mask
    @assertEqual(KGEnocorr(real(vec1, sp), real(vec2, sp)), 0.5066_sp, tolerance = t_sp)
    @assertEqual(KGEnocorr(vec1, vec2), 0.5066_dp, tolerance = t_dp)
    @assertEqual(KGEnocorr(real(arr1(:,:,1), sp), real(arr2(:,:,4), sp)), 0.0887_sp, tolerance = t_sp)
    @assertEqual(KGEnocorr(arr1(:,:,1), arr2(:,:,4)), 0.0887_dp, tolerance = t_dp)
    @assertEqual(KGEnocorr(real(arr1, sp), real(arr2, sp)), 0.8307_sp, tolerance = t_sp)
    @assertEqual(KGEnocorr(arr1, arr2), 0.8307_dp, tolerance = t_dp)

  end subroutine test_error_kgenocorr

  ! Test MAE (order: sp-dp, 1D-2D-3D)
  @test
  subroutine test_error_mae()
  
    ! With mask
    @assertEqual(MAE(real(vec1, sp), real(vec2, sp), mask=maskvec), 1.6123_sp, tolerance = t_sp)
    @assertEqual(MAE(vec1, vec2, mask=maskvec), 1.6123_dp, tolerance = t_dp)
    @assertEqual(MAE(real(arr1(:,:,1), sp), real(arr2(:,:,4), sp), mask=mask(:,:,1)), 2.1134_sp, tolerance = t_sp)
    @assertEqual(MAE(arr1(:,:,1), arr2(:,:,4), mask=mask(:,:,1)), 2.1134_dp, tolerance = t_dp)
    @assertEqual(MAE(real(arr1, sp), real(arr2, sp), mask=mask), 0.9097_sp, tolerance = t_sp)
    @assertEqual(MAE(arr1, arr2, mask=mask), 0.9097_dp, tolerance = t_dp)

    ! Without mask
    @assertEqual(MAE(real(vec1, sp), real(vec2, sp)), 2.8149_sp, tolerance = t_sp)
    @assertEqual(MAE(vec1, vec2), 2.8149_dp, tolerance = t_dp)
    @assertEqual(MAE(real(arr1(:,:,1), sp), real(arr2(:,:,4), sp)), 2.5415_sp, tolerance = t_sp)
    @assertEqual(MAE(arr1(:,:,1), arr2(:,:,4)), 2.5415_dp, tolerance = t_dp)
    @assertEqual(MAE(real(arr1, sp), real(arr2, sp)), 0.9000_sp, tolerance = t_sp)
    @assertEqual(MAE(arr1, arr2), 0.9000_dp, tolerance = t_dp)

  end subroutine test_error_mae

  ! Test MSE (order: sp-dp, 1D-2D-3D)
  @test
  subroutine test_error_mse()
  
    ! With mask
    @assertEqual(MSE(real(vec1, sp), real(vec2, sp), mask=maskvec), 4.2183_sp, tolerance = t_sp)
    @assertEqual(MSE(vec1, vec2, mask=maskvec), 4.2183_dp, tolerance = t_dp)
    @assertEqual(MSE(real(arr1(:,:,1), sp), real(arr2(:,:,4), sp), mask=mask(:,:,1)), 5.6920_sp, tolerance = t_sp)
    @assertEqual(MSE(arr1(:,:,1), arr2(:,:,4), mask=mask(:,:,1)), 5.6920_dp, tolerance = t_dp)
    @assertEqual(MSE(real(arr1, sp), real(arr2, sp), mask=mask), 1.0287_sp, tolerance = t_sp)
    @assertEqual(MSE(arr1, arr2, mask=mask), 1.0287_dp, tolerance = t_dp)

    ! Without mask
    @assertEqual(MSE(real(vec1, sp), real(vec2, sp)), 12.1489_sp, tolerance = t_sp)
    @assertEqual(MSE(vec1, vec2), 12.1489_dp, tolerance = t_dp)
    @assertEqual(MSE(real(arr1(:,:,1), sp), real(arr2(:,:,4), sp)), 8.1955_sp, tolerance = t_sp)
    @assertEqual(MSE(arr1(:,:,1), arr2(:,:,4)), 8.1955_dp, tolerance = t_dp)
    @assertEqual(MSE(real(arr1, sp), real(arr2, sp)), 1.0200_sp, tolerance = t_sp)
    @assertEqual(MSE(arr1, arr2), 1.0200_dp, tolerance = t_dp)

  end subroutine test_error_mse

  ! Test NSE (order: sp-dp, 1D-2D-3D)
  @test
  subroutine test_error_nse()
  
    ! With mask
    @assertEqual(NSE(real(vec1, sp), real(vec2, sp), mask=maskvec), -2.3368_sp, tolerance = t_sp)
    @assertEqual(NSE(vec1, vec2, mask=maskvec), -2.3368_dp, tolerance = t_dp)
    @assertEqual(NSE(real(arr1(:,:,1), sp), real(arr2(:,:,4), sp), mask=mask(:,:,1)), -3.5026_sp, tolerance = t_sp)
    @assertEqual(NSE(arr1(:,:,1), arr2(:,:,4), mask=mask(:,:,1)), -3.5026_dp, tolerance = t_dp)
    @assertEqual(NSE(real(arr1, sp), real(arr2, sp), mask=mask), 0.8164_sp, tolerance = t_sp)
    @assertEqual(NSE(arr1, arr2, mask=mask), 0.8164_dp, tolerance = t_dp)

    ! Without mask
    @assertEqual(NSE(real(vec1, sp), real(vec2, sp)), -0.6051_sp, tolerance = t_sp)
    @assertEqual(NSE(vec1, vec2), -0.6051_dp, tolerance = t_dp)
    @assertEqual(NSE(real(arr1(:,:,1), sp), real(arr2(:,:,4), sp)), -0.0828_sp, tolerance = t_sp)
    @assertEqual(NSE(arr1(:,:,1), arr2(:,:,4)), -0.0828_dp, tolerance = t_dp)
    @assertEqual(NSE(real(arr1, sp), real(arr2, sp)), 0.8905_sp, tolerance = t_sp)
    @assertEqual(NSE(arr1, arr2), 0.8905_dp, tolerance = t_dp)

  end subroutine test_error_nse

  ! Test weighted NSE (order: sp-dp, 1D-2D-3D)
  @test
  subroutine test_error_wnse()
  
    ! With mask
    @assertEqual(wNSE(real(vec1, sp), real(vec2, sp), mask=maskvec), -1.8952_sp, tolerance = t_sp)
    @assertEqual(wNSE(vec1, vec2, mask=maskvec), -1.8952_dp, tolerance = t_dp)
    @assertEqual(wNSE(real(arr1(:,:,1), sp), real(arr2(:,:,4), sp), mask=mask(:,:,1)), -2.0760_sp, tolerance = t_sp)
    @assertEqual(wNSE(arr1(:,:,1), arr2(:,:,4), mask=mask(:,:,1)), -2.0760_dp, tolerance = t_dp)
    @assertEqual(wNSE(real(arr1, sp), real(arr2, sp), mask=mask), 0.7876_sp, tolerance = t_sp)
    @assertEqual(wNSE(arr1, arr2, mask=mask), 0.7876_dp, tolerance = t_dp)

    ! Without mask
    @assertEqual(wNSE(real(vec1, sp), real(vec2, sp)), -1.2210_sp, tolerance = t_sp)
    @assertEqual(wNSE(vec1, vec2), -1.2210_dp, tolerance = t_dp)
    @assertEqual(wNSE(real(arr1(:,:,1), sp), real(arr2(:,:,4), sp)), -0.3059_sp, tolerance = t_sp)
    @assertEqual(wNSE(arr1(:,:,1), arr2(:,:,4)), -0.3058_dp, tolerance = t_dp)
    @assertEqual(wNSE(real(arr1, sp), real(arr2, sp)), 0.8919_sp, tolerance = t_sp)
    @assertEqual(wNSE(arr1, arr2), 0.8919_dp, tolerance = t_dp)

  end subroutine test_error_wnse

  ! Test SAE (order: sp-dp, 1D-2D-3D)
  @test
  subroutine test_error_sae()
  
    ! With mask
    @assertEqual(SAE(real(vec1, sp), real(vec2, sp), mask=maskvec), 40.3063_sp, tolerance = t_sp)
    @assertEqual(SAE(vec1, vec2, mask=maskvec), 40.3063_dp, tolerance = t_dp)
    @assertEqual(SAE(real(arr1(:,:,1), sp), real(arr2(:,:,4), sp), mask=mask(:,:,1)), 52.8359_sp, tolerance = t_sp)
    @assertEqual(SAE(arr1(:,:,1), arr2(:,:,4), mask=mask(:,:,1)), 52.8359_dp, tolerance = t_dp)
    @assertEqual(SAE(real(arr1, sp), real(arr2, sp), mask=mask), 205.5999_sp, tolerance = t_sp)
    @assertEqual(SAE(arr1, arr2, mask=mask), 205.6000_dp, tolerance = t_dp)

    ! Without mask
    @assertEqual(SAE(real(vec1, sp), real(vec2, sp)), 152.0071_sp, tolerance = t_sp)
    @assertEqual(SAE(vec1, vec2), 152.0070_dp, tolerance = t_dp)
    @assertEqual(SAE(real(arr1(:,:,1), sp), real(arr2(:,:,4), sp)), 137.2392_sp, tolerance = t_sp)
    @assertEqual(SAE(arr1(:,:,1), arr2(:,:,4)), 137.2392_dp, tolerance = t_dp)
    @assertEqual(SAE(real(arr1, sp), real(arr2, sp)), 388.7999_sp, tolerance = t_sp)
    @assertEqual(SAE(arr1, arr2), 388.8000_dp, tolerance = t_dp)

  end subroutine test_error_sae

  ! Test SSE (order: sp-dp, 1D-2D-3D)
  @test
  subroutine test_error_sse()
  
    ! With mask
    @assertEqual(SSE(real(vec1, sp), real(vec2, sp), mask=maskvec), 105.4575_sp, tolerance = t_sp)
    @assertEqual(SSE(vec1, vec2, mask=maskvec), 105.4575_dp, tolerance = t_dp)
    @assertEqual(SSE(real(arr1(:,:,1), sp), real(arr2(:,:,4), sp), mask=mask(:,:,1)), 142.3003_sp, tolerance = t_sp)
    @assertEqual(SSE(arr1(:,:,1), arr2(:,:,4), mask=mask(:,:,1)), 142.3003_dp, tolerance = t_dp)
    @assertEqual(SSE(real(arr1, sp), real(arr2, sp), mask=mask), 232.4799_sp, tolerance = t_sp)
    @assertEqual(SSE(arr1, arr2, mask=mask), 232.4800_dp, tolerance = t_dp)

    ! Without mask
    @assertEqual(SSE(real(vec1, sp), real(vec2, sp)), 656.0394_sp, tolerance = t_sp)
    @assertEqual(SSE(vec1, vec2), 656.0395_dp, tolerance = t_dp)
    @assertEqual(SSE(real(arr1(:,:,1), sp), real(arr2(:,:,4), sp)), 442.5580_sp, tolerance = t_sp)
    @assertEqual(SSE(arr1(:,:,1), arr2(:,:,4)), 442.5579_dp, tolerance = t_dp)
    @assertEqual(SSE(real(arr1, sp), real(arr2, sp)), 440.6398_sp, tolerance = t_sp)
    @assertEqual(SSE(arr1, arr2), 440.6400_dp, tolerance = t_dp)

  end subroutine test_error_sse

  ! Test RMSE (order: sp-dp, 1D-2D-3D)
  @test
  subroutine test_error_rmse()
  
    ! With mask
    @assertEqual(RMSE(real(vec1, sp), real(vec2, sp), mask=maskvec), 2.0538_sp, tolerance = t_sp)
    @assertEqual(RMSE(vec1, vec2, mask=maskvec), 2.0538_dp, tolerance = t_dp)
    @assertEqual(RMSE(real(arr1(:,:,1), sp), real(arr2(:,:,4), sp), mask=mask(:,:,1)), 2.3858_sp, tolerance = t_sp)
    @assertEqual(RMSE(arr1(:,:,1), arr2(:,:,4), mask=mask(:,:,1)), 2.3858_dp, tolerance = t_dp)
    @assertEqual(RMSE(real(arr1, sp), real(arr2, sp), mask=mask), 1.0142_sp, tolerance = t_sp)
    @assertEqual(RMSE(arr1, arr2, mask=mask), 1.0142_dp, tolerance = t_dp)

    ! Without mask
    @assertEqual(RMSE(real(vec1, sp), real(vec2, sp)), 3.4855_sp, tolerance = t_sp)
    @assertEqual(RMSE(vec1, vec2), 3.4855_dp, tolerance = t_dp)
    @assertEqual(RMSE(real(arr1(:,:,1), sp), real(arr2(:,:,4), sp)), 2.8628_sp, tolerance = t_sp)
    @assertEqual(RMSE(arr1(:,:,1), arr2(:,:,4)), 2.8628_dp, tolerance = t_dp)
    @assertEqual(RMSE(real(arr1, sp), real(arr2, sp)), 1.0100_sp, tolerance = t_sp)
    @assertEqual(RMSE(arr1, arr2), 1.0100_dp, tolerance = t_dp)

  end subroutine test_error_rmse

  ! Test LNNSE (order: sp-dp, 1D-2D-3D)
  @test
  subroutine test_error_lnnse()
  
    ! With mask
    @assertEqual(LNNSE(real(vec1, sp), real(vec2, sp), mask=maskvec), -0.8993_sp, tolerance = t_sp)
    @assertEqual(LNNSE(vec1, vec2, mask=maskvec), -0.8993_dp, tolerance = t_dp)
    @assertEqual(LNNSE(real(arr1(:,:,1), sp), real(arr2(:,:,4), sp), mask=mask(:,:,1)), -2.1656_sp, tolerance = t_sp)
    @assertEqual(LNNSE(arr1(:,:,1), arr2(:,:,4), mask=mask(:,:,1)), -2.1656_dp, tolerance = t_dp)
    @assertEqual(LNNSE(real(arr1, sp), real(arr2, sp), mask=mask), 0.8915_sp, tolerance = t_sp)
    @assertEqual(LNNSE(arr1, arr2, mask=mask), 0.8915_dp, tolerance = t_dp)

    ! Without mask
    @assertEqual(LNNSE(real(vec1, sp), real(vec2, sp)), -0.4641_sp, tolerance = t_sp)
    @assertEqual(LNNSE(vec1, vec2), -0.4641_dp, tolerance = t_dp)
    @assertEqual(LNNSE(real(arr1(:,:,1), sp), real(arr2(:,:,4), sp)), -0.0335_sp, tolerance = t_sp)
    @assertEqual(LNNSE(arr1(:,:,1), arr2(:,:,4)), -0.0335_dp, tolerance = t_dp)
    @assertEqual(LNNSE(real(arr1, sp), real(arr2, sp)), 0.9164_sp, tolerance = t_sp)
    @assertEqual(LNNSE(arr1, arr2), 0.9164_dp, tolerance = t_dp)

  end subroutine test_error_lnnse

end module test_mo_errormeasures