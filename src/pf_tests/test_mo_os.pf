module test_mo_os

  use funit
  use mo_os

  implicit none

  private

  public :: test_exists, test_isfile, test_isdir,test_splitext, test_split

contains

  @test
  subroutine test_exists()

    logical :: r1, r2, r3, r4, r5, r6

    call path_exists('./files/empty.txt', answer=r1)
    call path_exists('./files', answer=r2)
    call path_exists('./files/.', answer=r3)
    call path_exists('xxx', verbose=.false., answer=r4)
    call path_exists('./files_withtypo/.', verbose=.false., answer=r5)
    call path_exists('./empty_withtypo.txt', verbose=.false., answer=r6)

    @assertTrue(r1)
    @assertTrue(r2)
    @assertTrue(r3)
    @assertFalse(r4)
    @assertFalse(r5)
    @assertFalse(r6)

  end subroutine test_exists

  @test
  subroutine test_isfile()

    logical :: r1, r3, r4, r5, r6

    call path_isfile('./files/empty.txt', answer=r1)
    call path_isfile('../pf_tests', verbose=.false., answer=r3)
    call path_isfile('../pf_tests/', verbose=.false., answer=r4)
    call path_isfile('../files/.', verbose=.false., answer=r5)
    call path_isfile('./empty.txt', verbose=.false., answer=r6)

    @assertTrue(r1)
    @assertFalse(r3)
    @assertFalse(r4)
    @assertFalse(r5)
    @assertFalse(r6)

  end subroutine test_isfile

  @test
  subroutine test_isdir()

    logical :: r1, r2, r3, r4, r5, r6

    call path_isdir('./files/.', answer=r1)
    call path_isdir('./files/', answer=r2)
    call path_isdir('./files', answer=r3)
    call path_isdir('../../README', verbose=.false., answer=r4)
    call path_isdir('./files/empty.txt', verbose=.false., answer=r5)
    call path_isdir('./pf_tests', verbose=.false., answer=r6)

    @assertTrue(r1)
    @assertTrue(r2)
    @assertTrue(r3)
    @assertFalse(r4)
    @assertFalse(r5)
    @assertFalse(r6)

  end subroutine test_isdir

  @test
  subroutine test_splitext()

    character(len=100) :: root1, root2, root3
    character(len=100) :: ext1, ext2, ext3

    call path_splitext('./files/namelist.txt',root1,ext1)
    call path_splitext('./.',root2,ext2)
    call path_splitext('../../README',root3,ext3)

    @assertEqual(trim(root1), './files/namelist')
    @assertEqual(trim(ext1), '.txt')
    @assertEqual(trim(root2), './.')
    @assertEqual(trim(ext2), '')
    @assertEqual(trim(root3), '../../README')
    @assertEqual(trim(ext3), '')

  end subroutine test_splitext

  @test
  subroutine test_split()

    character(len=100) :: head1, head2, head3
    character(len=100) :: tail1,tail2,tail3

    call path_split('/home/user/Desktop/file.txt', head1, tail1)
    call path_split('/home/user/Desktop/', head2, tail2)
    call path_split('file.txt', head3, tail3)

    @assertEqual('/home/user/Desktop/', head1)
    @assertEqual('file.txt', tail1)
    @assertEqual('/home/user/Desktop/',head2)
    @assertEqual('', tail2)
    @assertEqual('', head3)
    @assertEqual('file.txt', tail3)

  end subroutine test_split

end module test_mo_os
