module test_mo_append
  
  use funit
  use mo_kind,   only: i4, i8, sp, dp
  use mo_append, only: append, paste, add_nodata_slice
  use mo_message, only: error_message

  implicit none

  character(256) :: message

contains

  ! TEST APPEND INTEGER(i4)
  @test
  subroutine test_append_i4()
    
    integer(i4), dimension(:),   allocatable  :: vector1_i4, vector2_i4, vector3_i4
    integer(i4), dimension(2)                 :: vector4_i4
  
    integer(i4), dimension(:,:), allocatable  :: matrix1_i4, matrix2_i4, matrix3_i4, matrix4_i4, matrix5_i4
    integer(i4), dimension(:,:), allocatable  :: mplaceholder_i4 
  
    integer(i4), dimension(:,:,:), allocatable  :: matrix1_3d_i4, matrix2_3d_i4, matrix3_3d_i4
    integer(i4), dimension(:,:,:), allocatable  :: mplaceholder_3d_i4 

    integer(i4), dimension(:,:,:,:), allocatable  :: matrix1_4d_i4, matrix2_4d_i4, matrix3_4d_i4

    ! ---------------------------------
    ! TEST APPEND i4
    ! ---------------------------------

      ! ---------------------------------
      ! TEST APPEND VECTOR i4

        allocate(vector2_i4(4))
      
        vector2_i4 = 2_i4
        vector4_i4 = 3_i4
      
        message='Test append i4: non-allocated vector1 appended by vector2'
        call append(vector1_i4, vector2_i4)
        @assertEqual(vector1_i4, (/ 2_i4,2_i4,2_i4,2_i4 /), message= message)

        message='Test append i4: vector1 appended by vector3'
        call append(vector1_i4, vector4_i4)
        @assertEqual(vector1_i4, (/ 2_i4,2_i4,2_i4,2_i4, 3_i4,3_i4 /), message= message)

        message='Test append i4: vector1 appended by scalar 5_i4'
        call append(vector1_i4, 5_i4)
        @assertEqual(vector1_i4, (/ 2_i4,2_i4,2_i4,2_i4, 3_i4,3_i4, 5_i4 /), message= message)

        message='Test append i4: non-allocated vector3 appended by scalar 5_i4'
        call append(vector3_i4, 5_i4)
        @assertEqual(vector3_i4, (/ 5_i4 /), message= message)

        deallocate(vector1_i4)
        deallocate(vector2_i4)
        deallocate(vector3_i4)

      ! ---------------------------------
      ! TEST APPEND MATRIX i4

        allocate(matrix1_i4(2,2), matrix2_i4(3,2), matrix3_i4(2,3), matrix5_i4(2,2))

        matrix1_i4 = 5_i4
        matrix2_i4 = 3_i4
        matrix3_i4 = 4_i4
        matrix5_i4 = 6_i4

        message='Test append i4: matrix1 appended by matrix2'
        call append(matrix1_i4, matrix2_i4)
        @assertEqual(matrix1_i4, reshape((/ 5_i4,5_i4,3_i4,3_i4,3_i4, 5_i4,5_i4,3_i4,3_i4,3_i4 /),(/ 5,2 /)), message= message)

        message='Test append i4: non-allocated matrix4 appended by matrix3'
        call append(matrix4_i4, matrix3_i4)
        @assertEqual(matrix4_i4, reshape((/ 4_i4,4_i4, 4_i4,4_i4, 4_i4,4_i4 /), (/ 2,3 /)), message= message)

        message='Test append i4: matrix2 (less columns) appended by matrix3 (more columns).&
                 Columns maintained with scalar fill 7_i4'
        call append(matrix2_i4, matrix3_i4, fill_value= 7_i4)
        allocate(mplaceholder_i4(5,3))
        mplaceholder_i4 = reshape((/ 3_i4,3_i4,3_i4,4_i4,4_i4, 3_i4,3_i4,3_i4,4_i4,4_i4, 7_i4,7_i4,7_i4,4_i4,4_i4 /), (/ 5,3 /))
        @assertEqual(matrix2_i4, mplaceholder_i4, message= message)
        deallocate(mplaceholder_i4)

        message='Test append i4: matrix4 (more columns) appended by matrix5 (less columns).& 
                 Columns maintained with scalar fill 7_i4'
        call append(matrix4_i4, matrix5_i4, fill_value= 7_i4)
        allocate(mplaceholder_i4(4,3))
        mplaceholder_i4 = reshape((/ 4_i4,4_i4,6_i4,6_i4, 4_i4,4_i4,6_i4,6_i4, 4_i4,4_i4,7_i4,7_i4 /), (/ 4,3 /))
        @assertEqual(matrix4_i4, mplaceholder_i4, message= message)
        deallocate(mplaceholder_i4)

        ! To do
        ! Test append for unequal columns without filler given. Can't use this since it immediately stops subroutine.
        
        deallocate(matrix1_i4, matrix2_i4, matrix3_i4, matrix4_i4, matrix5_i4)

      ! ---------------------------------
      ! TEST APPEND 3D MATRIX i4

        allocate(matrix2_3d_i4(2,2,2), matrix3_3d_i4(1,2,2))

        matrix2_3d_i4 = 2_i4
        matrix3_3d_i4 = 3_i4

        message='Test append i4: non-allocated matrix1_3d appended by matrix2_3d with filler'
        call append(matrix1_3d_i4, matrix2_3d_i4, fill_value=7_i4)
        allocate(mplaceholder_3d_i4(2,2,2))
        mplaceholder_3d_i4 = reshape((/ 2_i4,2_i4, 2_i4,2_i4,  2_i4,2_i4, 2_i4,2_i4 /), (/ 2,2,2 /))
        @assertEqual(matrix1_3d_i4, mplaceholder_3d_i4, message= message)
        deallocate(mplaceholder_3d_i4)

        message='Test append i4: matrix2_3d appended by matrix3_3d'
        call append(matrix2_3d_i4, matrix3_3d_i4)
        allocate(mplaceholder_3d_i4(3,2,2))
        mplaceholder_3d_i4 = reshape((/ 2_i4,2_i4,3_i4, 2_i4,2_i4,3_i4,  2_i4,2_i4,3_i4, 2_i4,2_i4,3_i4 /), (/ 3,2,2 /))
        @assertEqual(matrix2_3d_i4, mplaceholder_3d_i4, message= message)
        deallocate(mplaceholder_3d_i4)

        deallocate(matrix1_3d_i4, matrix2_3d_i4, matrix3_3d_i4)

    ! ---------------------------------
    ! TEST PASTE i4
    ! ---------------------------------

      ! ---------------------------------
      ! TEST PASTE MATRIX-SCALAR i4

        message= 'Test paste i4: non-allocated matrix1 pasted by 5_i4'
        call paste(matrix1_i4, 5_i4)
        @assertEqual(matrix1_i4, reshape((/ 5_i4 /), (/ 1,1 /)), message= message)

        message= 'Test paste i4: matrix1 pasted by 6_i4'
        call paste(matrix1_i4, 6_i4)
        @assertEqual(matrix1_i4, reshape((/ 5_i4, 6_i4 /), (/ 1,2 /)), message= message)

        deallocate(matrix1_i4)

      ! ---------------------------------
      ! TEST PASTE MATRIX-VECTOR i4

        allocate(vector1_i4(1), vector2_i4(3), vector3_i4(2))

        vector1_i4 = 1_i4
        vector2_i4 = 2_i4
        vector3_i4 = 3_i4

        message= 'Test paste i4: non-allocated matrix1 pasted by vector1'
        call paste(matrix1_i4, vector1_i4)
        @assertEqual(matrix1_i4, reshape((/ 1_i4 /), (/ 1,1 /)), message= message)

        message= 'Test paste i4: matrix1 pasted by vector1'
        call paste(matrix1_i4, vector1_i4)
        @assertEqual(matrix1_i4, reshape((/ 1_i4, 1_i4 /), (/ 1,2 /)), message= message)

        message= 'Test paste i4: matrix1 pasted by vector2'
        call paste(matrix1_i4, vector2_i4, fill_value= 4_i4)
        @assertEqual(matrix1_i4(2:3,:2), reshape((/ 4_i4,4_i4,4_i4,4_i4 /), (/ 2,2 /)), message= message)
        @assertEqual(matrix1_i4(:,3), vector2_i4, message= message)

        message= 'Test paste i4: matrix1 pasted by vector3'
        call paste(matrix1_i4, vector3_i4, fill_value= 4_i4)
        @assertEqual(matrix1_i4(:2,4), vector3_i4, message= message)
        @assertEqual(matrix1_i4(3,4), 4_i4, message= message)

        deallocate(vector1_i4, vector2_i4, vector3_i4)
        deallocate(matrix1_i4)

      ! ---------------------------------
      ! TEST PASTE MATRIX-MATRIX i4

        allocate(matrix2_i4(2,2), matrix3_i4(2,3))

        matrix2_i4 = 5_i4
        matrix3_i4 = 3_i4

        message= 'Test paste i4: non-allocated matrix1 pasted by matrix2'
        call paste(matrix1_i4, matrix2_i4)
        @assertEqual(matrix1_i4,reshape((/ 5_i4,5_i4, 5_i4,5_i4 /),(/ 2,2 /)), message= message)

        message= 'Test paste i4: matrix1 pasted by matrix3'
        call paste(matrix1_i4, matrix3_i4)
        @assertEqual(matrix1_i4, reshape((/ 5_i4,5_i4,5_i4,5_i4, 3_i4,3_i4,3_i4,3_i4,3_i4,3_i4 /),(/ 2,5 /)), message= message)

        message= 'Test nodata i4: matrix1 pasted by entire matrix of 5.0 in 2nd component'
        call add_nodata_slice(matrix1_i4, 2, 5_i4)
        @assertEqual(matrix1_i4(2,7), 5_i4, message= message)

        deallocate(matrix2_i4, matrix3_i4)
        
        allocate(matrix2_i4(2,2), matrix3_i4(3,3) )
        
        matrix2_i4 = 5_i4
        matrix3_i4 = 3_i4

        message= 'Test paste i4: matrix2 pasted by first row of matrix3'
        call paste(matrix2_i4, matrix3_i4(:1,:), fill_value= -9999_i4)
        @assertEqual(matrix2_i4(2,3), -9999_i4, message= message)
        @assertEqual(matrix2_i4(1,3), 3_i4, message= message)

        message= 'Test paste i4: matrix2 pasted by first row of matrix3'
        call paste(matrix2_i4, matrix3_i4, fill_value= 9999_i4)
        @assertEqual(matrix2_i4(3,5), 9999_i4, message= message)
        @assertEqual(matrix2_i4(3,6), 3_i4, message= message)

        deallocate(matrix1_i4, matrix2_i4, matrix3_i4)

      ! ---------------------------------
      ! TEST PASTE MATRIX 3D i4

        allocate(matrix2_3d_i4(2,2,2), matrix3_3d_i4(2,2,1))

        matrix2_3d_i4 = 2_i4
        matrix3_3d_i4 = 3_i4

        message= 'Test paste i4: unallocated matrix1 pasted by matrix2'
        call paste(matrix1_3d_i4, matrix2_3d_i4)
        @assertEqual(matrix1_3d_i4, matrix2_3d_i4, message= message)

        message= 'Test paste i4: matrix1 pasted by matrix3'
        call paste(matrix1_3d_i4, matrix3_3d_i4)
        @assertEqual(matrix1_3d_i4(2,2,3), 3_i4, message= message)

        message= 'Test nodata i4: 3d matrix1 pasted by entire matrix of 5.0 in 3rd component'
        call add_nodata_slice(matrix1_3d_i4, 2, 5_i4)
        @assertEqual(matrix1_3d_i4(2,2,5), 5_i4, message= message)

        deallocate(matrix1_3d_i4, matrix2_3d_i4, matrix3_3d_i4)

      ! ---------------------------------
      ! TEST PASTE MATRIX 4D i4

        allocate(matrix2_4d_i4(2,2,2,2), matrix3_4d_i4(2,2,2,1))

        matrix2_4d_i4 = 2_i4
        matrix3_4d_i4 = 3_i4

        message= 'Test paste i4: unallocated matrix1 pasted by matrix2'
        call paste(matrix1_4d_i4, matrix2_4d_i4)
        @assertEqual(matrix1_4d_i4, matrix2_4d_i4, message= message)

        message= 'Test paste i4: matrix1 pasted by matrix3'
        call paste(matrix1_4d_i4, matrix3_4d_i4)
        @assertEqual(matrix1_4d_i4(2,2,2,3), 3_i4, message= message)

        message= 'Test nodata i4: 4d matrix1 pasted by entire matrix of 5.0 in 4th component'
        call add_nodata_slice(matrix1_4d_i4, 2, 5_i4)
        @assertEqual(matrix1_4d_i4(2,2,2,5), 5_i4, message= message)

        deallocate(matrix1_4d_i4, matrix2_4d_i4, matrix3_4d_i4)

  end subroutine test_append_i4

  ! TEST APPEND INTEGER(i8)
  @test
  subroutine test_append_i8()
    
    integer(i8), dimension(:),   allocatable  :: vector1_i8, vector2_i8, vector3_i8
    integer(i8), dimension(2)                 :: vector4_i8
  
    integer(i8), dimension(:,:), allocatable  :: matrix1_i8, matrix2_i8, matrix3_i8, matrix4_i8, matrix5_i8
    integer(i8), dimension(:,:), allocatable  :: mplaceholder_i8 
  
    integer(i8), dimension(:,:,:), allocatable  :: matrix1_3d_i8, matrix2_3d_i8, matrix3_3d_i8
    integer(i8), dimension(:,:,:), allocatable  :: mplaceholder_3d_i8 
  
    character(256) :: message

    ! ---------------------------------
    ! TEST APPEND i8
    ! ---------------------------------

      ! ---------------------------------
      ! TEST APPEND VECTOR i8

        allocate(vector2_i8(4))
      
        vector2_i8 = 2_i8
        vector4_i8 = 3_i8
      
        message='Test append i8: non-allocated vector1 appended by vector2'
        call append(vector1_i8, vector2_i8)
        @assertEqual(vector1_i8, (/ 2_i8,2_i8,2_i8,2_i8 /), message= message)

        message='Test append i8: vector1 appended by vector3'
        call append(vector1_i8, vector4_i8)
        @assertEqual(vector1_i8, (/ 2_i8,2_i8,2_i8,2_i8, 3_i8,3_i8 /), message= message)

        message='Test append i8: vector1 appended by scalar 5_i8'
        call append(vector1_i8, 5_i8)
        @assertEqual(vector1_i8, (/ 2_i8,2_i8,2_i8,2_i8, 3_i8,3_i8, 5_i8 /), message= message)

        message='Test append i8: non-allocated vector3 appended by scalar 5_i8'
        call append(vector3_i8, 5_i8)
        @assertEqual(vector3_i8, (/ 5_i8 /), message= message)

        deallocate(vector1_i8)
        deallocate(vector2_i8)
        deallocate(vector3_i8)

      ! ---------------------------------
      ! TEST APPEND MATRIX i8

        allocate(matrix1_i8(2,2), matrix2_i8(3,2), matrix3_i8(2,3), matrix5_i8(2,2))

        matrix1_i8 = 5_i8
        matrix2_i8 = 3_i8
        matrix3_i8 = 4_i8
        matrix5_i8 = 6_i8

        message='Test append i8: matrix1 appended by matrix2'
        call append(matrix1_i8, matrix2_i8)
        @assertEqual(matrix1_i8, reshape((/ 5_i8,5_i8,3_i8,3_i8,3_i8, 5_i8,5_i8,3_i8,3_i8,3_i8 /),(/ 5,2 /)), message= message)

        message='Test append i8: non-allocated matrix4 appended by matrix3'
        call append(matrix4_i8, matrix3_i8)
        @assertEqual(matrix4_i8, reshape((/ 4_i8,4_i8, 4_i8,4_i8, 4_i8,4_i8 /), (/ 2,3 /)), message= message)

        message='Test append i8: matrix2 (less columns) appended by matrix3 (more columns).&
                Columns maintained with scalar fill 7_i8'
        call append(matrix2_i8, matrix3_i8, fill_value= 7_i8)
        allocate(mplaceholder_i8(5,3))
        mplaceholder_i8 = reshape((/ 3_i8,3_i8,3_i8,4_i8,4_i8, 3_i8,3_i8,3_i8,4_i8,4_i8, 7_i8,7_i8,7_i8,4_i8,4_i8 /), (/ 5,3 /))
        @assertEqual(matrix2_i8, mplaceholder_i8, message= message)
        deallocate(mplaceholder_i8)

        message='Test append i8: matrix4 (more columns) appended by matrix5 (less columns).&
                Columns maintained with scalar fill 7_i8'
        call append(matrix4_i8, matrix5_i8, fill_value= 7_i8)
        allocate(mplaceholder_i8(4,3))
        mplaceholder_i8 = reshape((/ 4_i8,4_i8,6_i8,6_i8, 4_i8,4_i8,6_i8,6_i8, 4_i8,4_i8,7_i8,7_i8 /), (/ 4,3 /))
        @assertEqual(matrix4_i8, mplaceholder_i8, message= message)
        deallocate(mplaceholder_i8)

        ! To do
        ! Test append for unequal columns without filler given. Can't use this since it immediately stops subroutine.
        
        deallocate(matrix1_i8, matrix2_i8, matrix3_i8, matrix4_i8, matrix5_i8)

      ! ---------------------------------
      ! TEST APPEND 3D MATRIX i8

        allocate(matrix2_3d_i8(2,2,2), matrix3_3d_i8(1,2,2))

        matrix2_3d_i8 = 2_i8
        matrix3_3d_i8 = 3_i8

        message='Test append i8: non-allocated matrix1_3d appended by matrix2_3d with filler'
        call append(matrix1_3d_i8, matrix2_3d_i8, fill_value= 7_i8)
        allocate(mplaceholder_3d_i8(2,2,2))
        mplaceholder_3d_i8 = reshape((/ 2_i8,2_i8, 2_i8,2_i8,  2_i8,2_i8, 2_i8,2_i8 /), (/ 2,2,2 /))
        @assertEqual(matrix1_3d_i8, mplaceholder_3d_i8, message= message)
        deallocate(mplaceholder_3d_i8)

        message='Test append i8: matrix2_3d appended by matrix3_3d'
        call append(matrix2_3d_i8, matrix3_3d_i8)
        allocate(mplaceholder_3d_i8(3,2,2))
        mplaceholder_3d_i8 = reshape((/ 2_i8,2_i8,3_i8, 2_i8,2_i8,3_i8,  2_i8,2_i8,3_i8, 2_i8,2_i8,3_i8 /), (/ 3,2,2 /))
        @assertEqual(matrix2_3d_i8, mplaceholder_3d_i8, message= message)
        deallocate(mplaceholder_3d_i8)

        deallocate(matrix1_3d_i8, matrix2_3d_i8, matrix3_3d_i8)

    ! ---------------------------------
    ! TEST PASTE i8
    ! ---------------------------------

      ! ---------------------------------
      ! TEST PASTE MATRIX-SCALAR i8

        message= 'Test paste i8: non-allocated matrix1 pasted by 5_i8'
        call paste(matrix1_i8, 5_i8)
        @assertEqual(matrix1_i8, reshape((/ 5_i8 /), (/ 1,1 /)), message= message)

        message= 'Test paste i8: matrix1 pasted by 6_i8'
        call paste(matrix1_i8, 6_i8)
        @assertEqual(matrix1_i8, reshape((/ 5_i8, 6_i8 /), (/ 1,2 /)), message= message)

        deallocate(matrix1_i8)

      ! ---------------------------------
      ! TEST PASTE MATRIX-VECTOR i8

        allocate(vector1_i8(1), vector2_i8(3), vector3_i8(2))

        vector1_i8 = 1_i8
        vector2_i8 = 2_i8
        vector3_i8 = 3_i8

        message= 'Test paste i8: non-allocated matrix1 pasted by vector1'
        call paste(matrix1_i8, vector1_i8)
        @assertEqual(matrix1_i8, reshape((/ 1_i8 /), (/ 1,1 /)), message= message)

        message= 'Test paste i8: matrix1 pasted by vector1'
        call paste(matrix1_i8, vector1_i8)
        @assertEqual(matrix1_i8, reshape((/ 1_i8, 1_i8 /), (/ 1,2 /)), message= message)

        message= 'Test paste i8: matrix1 pasted by vector2'
        call paste(matrix1_i8, vector2_i8, fill_value= 4_i8)
        @assertEqual(matrix1_i8(2:3,:2), reshape((/ 4_i8,4_i8,4_i8,4_i8 /), (/ 2,2 /)), message= message)
        @assertEqual(matrix1_i8(:,3), vector2_i8, message= message)

        message= 'Test paste i8: matrix1 pasted by vector3'
        call paste(matrix1_i8, vector3_i8, fill_value= 4_i8)
        @assertEqual(matrix1_i8(:2,4), vector3_i8, message= message)
        @assertEqual(matrix1_i8(3,4), 4_i8, message= message)

        deallocate(vector1_i8, vector2_i8, vector3_i8)
        deallocate(matrix1_i8)

      ! ---------------------------------
      ! TEST PASTE MATRIX-MATRIX i8

        allocate(matrix2_i8(2,2), matrix3_i8(2,3), matrix4_i8(1,3))

        matrix2_i8 = 5_i8
        matrix3_i8 = 3_i8
        matrix4_i8 = 2_i8

        message= 'Test paste i8: non-allocated matrix1 pasted by matrix2'
        call paste(matrix1_i8, matrix2_i8)
        @assertEqual(matrix1_i8,reshape((/ 5_i8,5_i8, 5_i8,5_i8 /),(/ 2,2 /)), message= message)

        message= 'Test paste i8: matrix1 pasted by matrix3'
        call paste(matrix1_i8, matrix3_i8)
        @assertEqual(matrix1_i8, reshape((/ 5_i8,5_i8,5_i8,5_i8, 3_i8,3_i8,3_i8,3_i8,3_i8,3_i8 /),(/ 2,5 /)), message= message)

        message= 'Test paste i8: matrix4 pasted by 5_i8'
        call paste(matrix4_i8, 5_i8)
        @assertEqual(matrix4_i8(1,:), (/ 2_i8,2_i8,2_i8, 5_i8 /), message= message)

        deallocate(matrix2_i8, matrix3_i8)
        
        allocate(matrix2_i8(2,2), matrix3_i8(3,3) )
        
        matrix2_i8 = 5_i8
        matrix3_i8 = 3_i8

        message= 'Test paste i8: matrix2 pasted by first row of matrix3'
        call paste(matrix2_i8, matrix3_i8(:1,:), fill_value= -9999_i8)
        @assertEqual(matrix2_i8(2,3), -9999_i8, message= message)
        @assertEqual(matrix2_i8(1,3), 3_i8, message= message)

        message= 'Test paste i8: matrix2 pasted by first row of matrix3'
        call paste(matrix2_i8, matrix3_i8, fill_value= 9999_i8)
        @assertEqual(matrix2_i8(3,5), 9999_i8, message= message)
        @assertEqual(matrix2_i8(3,6), 3_i8, message= message)

        deallocate(matrix1_i8, matrix2_i8, matrix3_i8, matrix4_i8)

  end subroutine test_append_i8

  ! TEST APPEND SINGLE PRECISION
  @test
  subroutine test_append_sp()
    
    real(sp), dimension(:),   allocatable  :: vector1_sp, vector2_sp, vector3_sp
    real(sp), dimension(2)                 :: vector4_sp
  
    real(sp), dimension(:,:), allocatable  :: matrix1_sp, matrix2_sp, matrix3_sp, matrix4_sp, matrix5_sp
    real(sp), dimension(:,:), allocatable  :: mplaceholder_sp 
  
    real(sp), dimension(:,:,:), allocatable  :: matrix1_3d_sp, matrix2_3d_sp, matrix3_3d_sp
    real(sp), dimension(:,:,:), allocatable  :: mplaceholder_3d_sp 
  
    character(256) :: message

    ! ---------------------------------
    ! TEST APPEND
    ! ---------------------------------

    ! ---------------------------------
    ! TEST APPEND VECTOR SINGLE PRECISION

    allocate(vector2_sp(4))
  
    vector2_sp = 2.0_sp
    vector4_sp = 3.0_sp
  
    message='Test append sp: non-allocated vector1 appended by vector2'
    call append(vector1_sp, vector2_sp)
    @assertEqual(vector1_sp, (/ 2.0_sp,2.0_sp,2.0_sp,2.0_sp /), message= message)

    message='Test append sp: vector1 appended by vector3'
    call append(vector1_sp, vector4_sp)
    @assertEqual(vector1_sp, (/ 2.0_sp,2.0_sp,2.0_sp,2.0_sp, 3.0_sp,3.0_sp /), message= message)

    message='Test append sp: vector1 appended by scalar 5_sp'
    call append(vector1_sp, 5.0_sp)
    @assertEqual(vector1_sp, (/ 2.0_sp,2.0_sp,2.0_sp,2.0_sp, 3.0_sp,3.0_sp, 5.0_sp /), message= message)

    message='Test append sp: non-allocated vector3 appended by scalar 5_sp'
    call append(vector3_sp, 5.0_sp)
    @assertEqual(vector3_sp, (/ 5.0_sp /), message= message)

    deallocate(vector1_sp)
    deallocate(vector2_sp)
    deallocate(vector3_sp)

    ! ---------------------------------
    ! TEST APPEND MATRIX SINGLE PRECISION

    allocate(matrix1_sp(2,2), matrix2_sp(3,2), matrix3_sp(2,3), matrix5_sp(2,2))

    matrix1_sp = 5.0_sp
    matrix2_sp = 3.0_sp
    matrix3_sp = 4.0_sp
    matrix5_sp = 6.0_sp

    message='Test append sp: matrix1 appended by matrix2'
    call append(matrix1_sp, matrix2_sp)
    allocate(mplaceholder_sp(5,2))
    mplaceholder_sp = reshape((/ 5.0_sp,5.0_sp,3.0_sp,3.0_sp,3.0_sp, &
                                5.0_sp,5.0_sp,3.0_sp,3.0_sp,3.0_sp /),(/ 5,2 /))
    @assertEqual(matrix1_sp, mplaceholder_sp, message= message)
    deallocate(mplaceholder_sp)

    message='Test append sp: non-allocated matrix4 appended by matrix3'
    call append(matrix4_sp, matrix3_sp)
    allocate(mplaceholder_sp(2,3))
    mplaceholder_sp = reshape((/ 4.0_sp,4.0_sp, 4.0_sp,4.0_sp, 4.0_sp,&
                                4.0_sp /), (/ 2,3 /))
    @assertEqual(matrix4_sp, mplaceholder_sp, message= message)
    deallocate(mplaceholder_sp)

    ! message='Test append sp: matrix2 (less columns) appended by matrix3 (more columns). Fill not given, exception raised.'
    !call append(matrix3_sp, matrix2_sp)
    ! allocate(mplaceholder_sp(2,3))
    !@assertExceptionRaised('Exception was raised for append')
    ! mplaceholder_sp = reshape((/ 4.0_sp,4.0_sp, 4.0_sp,4.0_sp, 4.0_sp,&
    !                             4.0_sp /), (/ 2,3 /))
    ! @assertEqual(matrix3_sp, mplaceholder_sp, message= message)
    ! deallocate(mplaceholder_sp)

    message='Test append sp: matrix2 (less columns) appended by matrix3 (more columns). Columns maintained with scalar fill 7_sp'
    call append(matrix2_sp, matrix3_sp, fill_value= 7.0_sp)
    allocate(mplaceholder_sp(5,3))
    mplaceholder_sp = reshape((/ 3.0_sp,3.0_sp,3.0_sp,4.0_sp,4.0_sp, &
                                3.0_sp,3.0_sp,3.0_sp,4.0_sp,4.0_sp, &
                                7.0_sp,7.0_sp,7.0_sp,4.0_sp,4.0_sp /), (/ 5,3 /))
    @assertEqual(matrix2_sp, mplaceholder_sp, message= message)
    deallocate(mplaceholder_sp)

    message='Test append sp: matrix4 (more columns) appended by matrix5 (less columns). Columns maintained with scalar fill 7_sp'
    call append(matrix4_sp, matrix5_sp, fill_value= 7.0_sp)
    allocate(mplaceholder_sp(4,3))
    mplaceholder_sp = reshape((/ 4.0_sp,4.0_sp,6.0_sp,6.0_sp, &
                                4.0_sp,4.0_sp,6.0_sp,6.0_sp, &
                                4.0_sp,4.0_sp,7.0_sp,7.0_sp /), (/ 4,3 /))
    @assertEqual(matrix4_sp, mplaceholder_sp, message= message)
    deallocate(mplaceholder_sp)

    ! To do
    ! Test append for unequal columns without filler given. Can't use this since it immediately stops subroutine.
    
    deallocate(matrix1_sp, matrix2_sp, matrix3_sp, matrix4_sp, matrix5_sp)

    ! ---------------------------------
    ! TEST APPEND 3D MATRIX SINGLE PRECISION

    allocate(matrix2_3d_sp(2,2,2), matrix3_3d_sp(1,2,2))

    matrix2_3d_sp = 2.0_sp
    matrix3_3d_sp = 3.0_sp

    message='Test append sp: non-allocated matrix1_3d appended by matrix2_3d with filler'
    call append(matrix1_3d_sp, matrix2_3d_sp, fill_value= 7.0_sp)
    allocate(mplaceholder_3d_sp(2,2,2))
    mplaceholder_3d_sp = reshape((/ 2.0_sp,2.0_sp, 2.0_sp,2.0_sp,  &
                                    2.0_sp,2.0_sp, 2.0_sp,2.0_sp /), (/ 2,2,2 /))
    @assertEqual(matrix1_3d_sp, mplaceholder_3d_sp, message= message)
    deallocate(mplaceholder_3d_sp)

    message='Test append sp: matrix2_3d appended by matrix3_3d'
    call append(matrix2_3d_sp, matrix3_3d_sp)
    allocate(mplaceholder_3d_sp(3,2,2))
    mplaceholder_3d_sp = reshape((/ 2.0_sp,2.0_sp,3.0_sp, 2.0_sp,2.0_sp,3.0_sp,  &
                                    2.0_sp,2.0_sp,3.0_sp, 2.0_sp,2.0_sp,3.0_sp /), (/ 3,2,2 /))
    @assertEqual(matrix2_3d_sp, mplaceholder_3d_sp, message= message)
    deallocate(mplaceholder_3d_sp)

    deallocate(matrix1_3d_sp, matrix2_3d_sp, matrix3_3d_sp)

    ! ---------------------------------
    ! TEST PASTE SINGLE PRECISION
    ! ---------------------------------

      ! ---------------------------------
      ! TEST PASTE MATRIX-SCALAR SINGLE PRECISION

        message= 'Test paste sp: non-allocated matrix1 pasted by 5.0_sp'
        call paste(matrix1_sp, 5.0_sp)
        @assertEqual(matrix1_sp, reshape((/ 5.0_sp /), (/ 1,1 /)), message= message)

        message= 'Test paste sp: matrix1 pasted by 6.0_sp'
        call paste(matrix1_sp, 6.0_sp)
        @assertEqual(matrix1_sp, reshape((/ 5.0_sp, 6.0_sp /), (/ 1,2 /)), message= message)

        deallocate(matrix1_sp)

      ! ---------------------------------
      ! TEST PASTE MATRIX-VECTOR SINGLE PRECISION

        allocate(vector1_sp(1), vector2_sp(3), vector3_sp(2))

        vector1_sp = 1.0_sp
        vector2_sp = 2.0_sp
        vector3_sp = 3.0_sp

        message= 'Test paste sp: non-allocated matrix1 pasted by vector1'
        call paste(matrix1_sp, vector1_sp)
        @assertEqual(matrix1_sp, reshape((/ 1.0_sp /), (/ 1,1 /)), message= message)

        message= 'Test paste sp: matrix1 pasted by vector1'
        call paste(matrix1_sp, vector1_sp)
        @assertEqual(matrix1_sp, reshape((/ 1.0_sp, 1.0_sp /), (/ 1,2 /)), message= message)

        message= 'Test paste sp: matrix1 pasted by vector2'
        call paste(matrix1_sp, vector2_sp, fill_value= 4.0_sp)
        @assertEqual(matrix1_sp(2:3,:2), reshape((/ 4.0_sp,4.0_sp,4.0_sp,4.0_sp /), (/ 2,2 /)), message= message)
        @assertEqual(matrix1_sp(:,3), vector2_sp, message= message)

        message= 'Test paste sp: matrix1 pasted by vector3'
        call paste(matrix1_sp, vector3_sp, fill_value= 4.0_sp)
        @assertEqual(matrix1_sp(:2,4), vector3_sp, message= message)
        @assertEqual(matrix1_sp(3,4), 4.0_sp, message= message)

        deallocate(vector1_sp, vector2_sp, vector3_sp)
        deallocate(matrix1_sp)

      ! ---------------------------------
      ! TEST PASTE MATRIX-MATRIX SINGLE PRECISION

        allocate(matrix2_sp(2,2), matrix3_sp(2,3))

        matrix2_sp = 5.0_sp
        matrix3_sp = 3.0_sp

        message= 'Test paste sp: non-allocated matrix1 pasted by matrix2'
        call paste(matrix1_sp, matrix2_sp)
        @assertEqual(matrix1_sp,reshape((/ 5.0_sp,5.0_sp, 5.0_sp,5.0_sp /),(/ 2,2 /)), message= message)

        message= 'Test paste sp: matrix1 pasted by matrix3'
        allocate(mplaceholder_sp(2,5))
        mplaceholder_sp = reshape((/ 5.0_sp,5.0_sp,5.0_sp,5.0_sp, 3.0_sp,3.0_sp,3.0_sp,3.0_sp,3.0_sp,3.0_sp /),(/ 2,5 /))
        call paste(matrix1_sp, matrix3_sp)
        @assertEqual(matrix1_sp, mplaceholder_sp, message= message)
        deallocate(mplaceholder_sp)

        deallocate(matrix2_sp, matrix3_sp)
        
        allocate(matrix2_sp(2,2), matrix3_sp(3,3) )
        
        matrix2_sp = 5.0_sp
        matrix3_sp = 3.0_sp

        message= 'Test paste sp: matrix2 pasted by first row of matrix3'
        call paste(matrix2_sp, matrix3_sp(:1,:), fill_value= -9999.0_sp)
        @assertEqual(matrix2_sp(2,3), -9999.0_sp, message= message)
        @assertEqual(matrix2_sp(1,3), 3.0_sp, message= message)

        message= 'Test paste sp: matrix2 pasted by first row of matrix3'
        call paste(matrix2_sp, matrix3_sp, fill_value= 9999.0_sp)
        @assertEqual(matrix2_sp(3,5), 9999.0_sp, message= message)
        @assertEqual(matrix2_sp(3,6), 3.0_sp, message= message)

        deallocate(matrix1_sp, matrix2_sp, matrix3_sp)

  end subroutine test_append_sp

  ! TEST APPEND DOUBLE PRECISION
  @test
  subroutine test_append_dp()
    
    real(dp), dimension(:),   allocatable  :: vector1_dp, vector2_dp, vector3_dp
    real(dp), dimension(2)                 :: vector4_dp
  
    real(dp), dimension(:,:), allocatable  :: matrix1_dp, matrix2_dp, matrix3_dp, matrix4_dp, matrix5_dp
    real(dp), dimension(:,:), allocatable  :: mplaceholder_dp 
  
    real(dp), dimension(:,:,:), allocatable  :: matrix1_3d_dp, matrix2_3d_dp, matrix3_3d_dp, matrix4_3d_dp
    real(dp), dimension(:,:,:), allocatable  :: matrix5_3d_dp
    real(dp), dimension(:,:,:), allocatable  :: mplaceholder_3d_dp 

    real(dp), dimension(:,:,:,:), allocatable  :: matrix1_4d_dp, matrix2_4d_dp, matrix3_4d_dp, matrix4_4d_dp
    real(dp), dimension(:,:,:,:), allocatable  :: matrix5_4d_dp, matrix6_4d_dp
    real(dp), dimension(:,:,:,:), allocatable  :: mplaceholder_4d_dp 
  
    character(256) :: message

    ! ---------------------------------
    ! TEST APPEND DOUBLE PRECISION
    ! ---------------------------------

      ! ---------------------------------
      ! TEST APPEND VECTOR DOUBLE PRECISION

        allocate(vector2_dp(4))
      
        vector2_dp = 2.0_dp
        vector4_dp = 3.0_dp
      
        message='Test append dp: non-allocated vector1 appended by vector2'
        call append(vector1_dp, vector2_dp)
        @assertEqual(vector1_dp, (/ 2.0_dp,2.0_dp,2.0_dp,2.0_dp /), message= message)

        message='Test append dp: vector1 appended by vector3'
        call append(vector1_dp, vector4_dp)
        @assertEqual(vector1_dp, (/ 2.0_dp,2.0_dp,2.0_dp,2.0_dp, 3.0_dp,3.0_dp /), message= message)

        message='Test append dp: vector1 appended by scalar 5_dp'
        call append(vector1_dp, 5.0_dp)
        @assertEqual(vector1_dp, (/ 2.0_dp,2.0_dp,2.0_dp,2.0_dp, 3.0_dp,3.0_dp, 5.0_dp /), message= message)

        message='Test append dp: non-allocated vector3 appended by scalar 5_dp'
        call append(vector3_dp, 5.0_dp)
        @assertEqual(vector3_dp, (/ 5.0_dp /), message= message)

        deallocate(vector1_dp)
        deallocate(vector2_dp)
        deallocate(vector3_dp)

      ! ---------------------------------
      ! TEST APPEND MATRIX DOUBLE PRECISION

        allocate(matrix1_dp(2,2), matrix2_dp(3,2), matrix3_dp(2,3), matrix5_dp(2,2))

        matrix1_dp = 5.0_dp
        matrix2_dp = 3.0_dp
        matrix3_dp = 4.0_dp
        matrix5_dp = 6.0_dp

        message='Test append dp: matrix1 appended by matrix2'
        call append(matrix1_dp, matrix2_dp)
        allocate(mplaceholder_dp(5,2))
        mplaceholder_dp = reshape((/ 5.0_dp,5.0_dp,3.0_dp,3.0_dp,3.0_dp, &
                                    5.0_dp,5.0_dp,3.0_dp,3.0_dp,3.0_dp /),(/ 5,2 /))
        @assertEqual(matrix1_dp, mplaceholder_dp, message= message)
        deallocate(mplaceholder_dp)

        message='Test append dp: non-allocated matrix4 appended by matrix3'
        call append(matrix4_dp, matrix3_dp)
        allocate(mplaceholder_dp(2,3))
        mplaceholder_dp = reshape((/ 4.0_dp,4.0_dp, 4.0_dp,4.0_dp, 4.0_dp,&
                                    4.0_dp /), (/ 2,3 /))
        @assertEqual(matrix4_dp, mplaceholder_dp, message= message)
        deallocate(mplaceholder_dp)

        message='Test append dp: matrix2 (less columns) appended by matrix3 (more columns).& 
                Columns maintained with scalar fill 7_dp'
        call append(matrix2_dp, matrix3_dp, fill_value= 7.0_dp)
        allocate(mplaceholder_dp(5,3))
        mplaceholder_dp = reshape((/ 3.0_dp,3.0_dp,3.0_dp,4.0_dp,4.0_dp, &
                                    3.0_dp,3.0_dp,3.0_dp,4.0_dp,4.0_dp, &
                                    7.0_dp,7.0_dp,7.0_dp,4.0_dp,4.0_dp /), (/ 5,3 /))
        @assertEqual(matrix2_dp, mplaceholder_dp, message= message)
        deallocate(mplaceholder_dp)

        message='Test append dp: matrix4 (more columns) appended by matrix5 (less columns).&
                Columns maintained with scalar fill 7_dp'
        call append(matrix4_dp, matrix5_dp, fill_value= 7.0_dp)
        allocate(mplaceholder_dp(4,3))
        mplaceholder_dp = reshape((/ 4.0_dp,4.0_dp,6.0_dp,6.0_dp, &
                                    4.0_dp,4.0_dp,6.0_dp,6.0_dp, &
                                    4.0_dp,4.0_dp,7.0_dp,7.0_dp /), (/ 4,3 /))
        @assertEqual(matrix4_dp, mplaceholder_dp, message= message)
        deallocate(mplaceholder_dp)

        message='Test append dp: matrix4 appended by matrix3 along the rows, idim=1'
        call append(matrix4_dp, matrix3_dp, 7.0_dp, 1)
        allocate(mplaceholder_dp(6,3))
        mplaceholder_dp = reshape((/ 4.0_dp,4.0_dp,6.0_dp,6.0_dp, 4.0_dp, 4.0_dp,&
                                    4.0_dp,4.0_dp,6.0_dp,6.0_dp, 4.0_dp, 4.0_dp,&
                                    4.0_dp,4.0_dp,7.0_dp,7.0_dp, 4.0_dp, 4.0_dp /), (/ 6,3 /))
        @assertEqual(matrix4_dp, mplaceholder_dp, message= message)
        deallocate(mplaceholder_dp)

        message='Test append dp: matrix3 appended by matrix5 along the columns, idim=2'
        call append(matrix3_dp, matrix5_dp, 7.0_dp, 2)
        allocate(mplaceholder_dp(2,5))
        mplaceholder_dp = reshape((/ 4.0_dp,4.0_dp,4.0_dp,4.0_dp, &
                                    4.0_dp,4.0_dp,6.0_dp,6.0_dp, &
                                    6.0_dp,6.0_dp /), (/ 2,5 /))
        @assertEqual(matrix3_dp, mplaceholder_dp, message= message)
        deallocate(mplaceholder_dp)

        ! To do
        ! Test append for unequal columns without filler given. Can't use this since it immediately stops subroutine.
        
        deallocate(matrix1_dp, matrix2_dp, matrix3_dp, matrix4_dp, matrix5_dp)

      ! ---------------------------------
      ! TEST APPEND 3D MATRIX DOUBLE PRECISION

        allocate(matrix2_3d_dp(1,2,2), matrix3_3d_dp(1,2,2), matrix4_3d_dp(2,1,2), matrix5_3d_dp(2,2,1))

        matrix2_3d_dp = 2.0_dp
        matrix3_3d_dp = 3.0_dp
        matrix4_3d_dp = 4.0_dp
        matrix5_3d_dp = 5.0_dp

        message='Test append dp: non-allocated matrix1_3d appended by matrix2_3d with filler'
        call append(matrix1_3d_dp, matrix2_3d_dp, fill_value= 7.0_dp)
        allocate(mplaceholder_3d_dp(1,2,2))
        mplaceholder_3d_dp = reshape((/ 2.0_dp, 2.0_dp,  &
                                        2.0_dp, 2.0_dp /), (/ 1,2,2 /))
        @assertEqual(matrix1_3d_dp, mplaceholder_3d_dp, message= message)
        deallocate(mplaceholder_3d_dp)

        message='Test append dp: matrix2_3d appended by matrix3_3d, idim=1'
        call append(matrix2_3d_dp, matrix3_3d_dp, idim=1)
        allocate(mplaceholder_3d_dp(2,2,2))
        mplaceholder_3d_dp = reshape((/ 2.0_dp,3.0_dp, 2.0_dp,3.0_dp,  &
                                        2.0_dp,3.0_dp, 2.0_dp,3.0_dp /), (/ 2,2,2 /))
        @assertEqual(matrix2_3d_dp, mplaceholder_3d_dp, message= message)
        deallocate(mplaceholder_3d_dp)

        message='Test append dp: matrix2_3d appended by matrix4_3d, idim=2'
        call append(matrix2_3d_dp, matrix4_3d_dp, idim=2)
        allocate(mplaceholder_3d_dp(2,3,2))
        mplaceholder_3d_dp = reshape((/ 2.0_dp,3.0_dp, 2.0_dp,3.0_dp, 4.0_dp,4.0_dp,  &
                                        2.0_dp,3.0_dp, 2.0_dp,3.0_dp, 4.0_dp,4.0_dp /), (/ 2,3,2 /))
        @assertEqual(matrix2_3d_dp, mplaceholder_3d_dp, message= message)
        deallocate(mplaceholder_3d_dp)

        message='Test append dp: matrix1_3d appended by matrix3_3d appended by matrix5_3d, idim=3'
        call append(matrix1_3d_dp, matrix3_3d_dp, idim=1)
        call append(matrix1_3d_dp, matrix5_3d_dp, idim=3)
        allocate(mplaceholder_3d_dp(2,2,3))
        mplaceholder_3d_dp = reshape((/ 2.0_dp,3.0_dp, 2.0_dp,3.0_dp, &
                                        2.0_dp,3.0_dp, 2.0_dp,3.0_dp, &
                                        5.0_dp,5.0_dp, 5.0_dp,5.0_dp /), (/ 2,2,3 /))
        @assertEqual(matrix1_3d_dp, mplaceholder_3d_dp, message= message)
        deallocate(mplaceholder_3d_dp)

        deallocate(matrix1_3d_dp, matrix2_3d_dp, matrix3_3d_dp, matrix4_3d_dp, matrix5_3d_dp)

      ! ---------------------------------
      ! TEST APPEND 4D MATRIX DOUBLE PRECISION

        allocate(matrix2_4d_dp(1,2,2,1), matrix3_4d_dp(1,2,2,1), matrix4_4d_dp(2,1,2,1)) 
        allocate(matrix5_4d_dp(2,2,1,1), matrix6_4d_dp(2,2,3,1))

        matrix2_4d_dp = 2.0_dp
        matrix3_4d_dp = 3.0_dp
        matrix4_4d_dp = 4.0_dp
        matrix5_4d_dp = 5.0_dp
        matrix6_4d_dp = 6.0_dp

        message='Test append dp: non-allocated matrix1_4d appended by matrix2_4d with filler'
        call append(matrix1_4d_dp, matrix2_4d_dp, fill_value= 7.0_dp)
        allocate(mplaceholder_4d_dp(1,2,2,1))
        mplaceholder_4d_dp = reshape((/ 2.0_dp, 2.0_dp,  &
                                        2.0_dp, 2.0_dp /), (/ 1,2,2,1 /))
        @assertEqual(matrix1_4d_dp, mplaceholder_4d_dp, message= message)
        deallocate(mplaceholder_4d_dp)

        message='Test append dp: matrix2_4d appended by matrix3_4d, idim=1'
        call append(matrix2_4d_dp, matrix3_4d_dp, idim=1)
        allocate(mplaceholder_4d_dp(2,2,2,1))
        mplaceholder_4d_dp = reshape((/ 2.0_dp,3.0_dp, 2.0_dp,3.0_dp,  &
                                        2.0_dp,3.0_dp, 2.0_dp,3.0_dp /), (/ 2,2,2,1 /))
        @assertEqual(matrix2_4d_dp, mplaceholder_4d_dp, message= message)
        deallocate(mplaceholder_4d_dp)

        message='Test append dp: matrix2_4d appended by matrix4_4d, idim=2'
        call append(matrix2_4d_dp, matrix4_4d_dp, idim=2)
        allocate(mplaceholder_4d_dp(2,3,2,1))
        mplaceholder_4d_dp = reshape((/ 2.0_dp,3.0_dp, 2.0_dp,3.0_dp, 4.0_dp,4.0_dp,  &
                                        2.0_dp,3.0_dp, 2.0_dp,3.0_dp, 4.0_dp,4.0_dp /), (/ 2,3,2,1 /))
        @assertEqual(matrix2_4d_dp, mplaceholder_4d_dp, message= message)
        deallocate(mplaceholder_4d_dp)

        message='Test append dp: matrix1_4d appended by matrix3_4d appended by matrix5_4d, idim=3'
        call append(matrix1_4d_dp, matrix3_4d_dp, idim=1)
        call append(matrix1_4d_dp, matrix5_4d_dp, idim=3)
        allocate(mplaceholder_4d_dp(2,2,3,1))
        mplaceholder_4d_dp = reshape((/ 2.0_dp,3.0_dp, 2.0_dp,3.0_dp, &
                                        2.0_dp,3.0_dp, 2.0_dp,3.0_dp, &
                                        5.0_dp,5.0_dp, 5.0_dp,5.0_dp /), (/ 2,2,3,1 /))
        @assertEqual(matrix1_4d_dp, mplaceholder_4d_dp, message= message)
        deallocate(mplaceholder_4d_dp)

        message='Test append dp: matrix1_4d appended by matrix6_4d, idim=4'
        call append(matrix1_4d_dp, matrix6_4d_dp, idim=4)
        allocate(mplaceholder_4d_dp(2,2,3,2))
        mplaceholder_4d_dp = reshape((/ 2.0_dp,3.0_dp, 2.0_dp,3.0_dp, &
                                        2.0_dp,3.0_dp, 2.0_dp,3.0_dp, &
                                        5.0_dp,5.0_dp, 5.0_dp,5.0_dp, &
                                        6.0_dp,6.0_dp, 6.0_dp,6.0_dp, &
                                        6.0_dp,6.0_dp, 6.0_dp,6.0_dp, &
                                        6.0_dp,6.0_dp, 6.0_dp,6.0_dp /), (/ 2,2,3,2 /))
        @assertEqual(matrix1_4d_dp, mplaceholder_4d_dp, message= message)
        deallocate(mplaceholder_4d_dp)

        deallocate(matrix1_4d_dp, matrix2_4d_dp, matrix3_4d_dp, matrix4_4d_dp, matrix5_4d_dp, matrix6_4d_dp)

    ! ---------------------------------
    ! TEST PASTE DOUBLE PRECISION
    ! ---------------------------------

      ! ---------------------------------
      ! TEST PASTE MATRIX-SCALAR DOUBLE PRECISION

        message= 'Test paste dp: non-allocated matrix1 pasted by 5.0_dp'
        call paste(matrix1_dp, 5.0_dp)
        @assertEqual(matrix1_dp, reshape((/ 5.0_dp /), (/ 1,1 /)), message= message)

        message= 'Test paste dp: matrix1 pasted by 6_dp'
        call paste(matrix1_dp, 6.0_dp)
        @assertEqual(matrix1_dp, reshape((/ 5.0_dp, 6.0_dp /), (/ 1,2 /)), message= message)

        deallocate(matrix1_dp)

      ! ---------------------------------
      ! TEST PASTE MATRIX-VECTOR DOUBLE PRECISION

        allocate(vector1_dp(1), vector2_dp(3), vector3_dp(2))

        vector1_dp = 1.0_dp
        vector2_dp = 2.0_dp
        vector3_dp = 3.0_dp

        message= 'Test paste dp: non-allocated matrix1 pasted by vector1'
        call paste(matrix1_dp, vector1_dp)
        @assertEqual(matrix1_dp, reshape((/ 1.0_dp /), (/ 1,1 /)), message= message)

        message= 'Test paste dp: matrix1 pasted by vector1'
        call paste(matrix1_dp, vector1_dp)
        @assertEqual(matrix1_dp, reshape((/ 1.0_dp, 1.0_dp /), (/ 1,2 /)), message= message)

        message= 'Test paste dp: matrix1 pasted by vector2'
        call paste(matrix1_dp, vector2_dp, fill_value= 4.0_dp)
        @assertEqual(matrix1_dp(2:3,:2), reshape((/ 4.0_dp,4.0_dp,4.0_dp,4.0_dp /), (/ 2,2 /)), message= message)
        @assertEqual(matrix1_dp(:,3), vector2_dp, message= message)

        message= 'Test paste dp: matrix1 pasted by vector3'
        call paste(matrix1_dp, vector3_dp, fill_value= 4.0_dp)
        @assertEqual(matrix1_dp(:2,4), vector3_dp, message= message)
        @assertEqual(matrix1_dp(3,4), 4.0_dp, message= message)

        deallocate(vector1_dp, vector2_dp, vector3_dp)
        deallocate(matrix1_dp)

      ! ---------------------------------
      ! TEST PASTE MATRIX-MATRIX DOUBLE PRECISION

        allocate(matrix2_dp(2,2), matrix3_dp(2,3))

        matrix2_dp = 5.0_dp
        matrix3_dp = 3.0_dp

        message= 'Test paste dp: non-allocated matrix1 pasted by matrix2'
        call paste(matrix1_dp, matrix2_dp)
        @assertEqual(matrix1_dp,reshape((/ 5.0_dp,5.0_dp, 5.0_dp,5.0_dp /),(/ 2,2 /)), message= message)

        message= 'Test paste dp: matrix1 pasted by matrix3'
        call paste(matrix1_dp, matrix3_dp)
        allocate(mplaceholder_dp(2,5))
        mplaceholder_dp = reshape((/ 5.0_dp,5.0_dp,5.0_dp,5.0_dp, 3.0_dp,3.0_dp,3.0_dp,3.0_dp,3.0_dp,3.0_dp /),(/ 2,5 /))
        @assertEqual(matrix1_dp, mplaceholder_dp, message= message)
        deallocate(mplaceholder_dp)

        message= 'Test nodata dp: matrix1 pasted by entire matrix of 5.0 in 2nd component'
        call add_nodata_slice(matrix1_dp, 2, 5.0_dp)
        @assertEqual(matrix1_dp(2,6), 5.0_dp, message= message)

        deallocate(matrix2_dp, matrix3_dp)
        
        allocate(matrix2_dp(2,2), matrix3_dp(3,3) )
        
        matrix2_dp = 5.0_dp
        matrix3_dp = 3.0_dp

        message= 'Test paste dp: matrix2 pasted by first row of matrix3'
        call paste(matrix2_dp, matrix3_dp(:1,:), fill_value= -9999.0_dp)
        @assertEqual(matrix2_dp(2,3), -9999.0_dp, message= message)
        @assertEqual(matrix2_dp(1,3), 3.0_dp, message= message)

        message= 'Test paste dp: matrix2 pasted by first row of matrix3'
        call paste(matrix2_dp, matrix3_dp, fill_value= 9999.0_dp)
        @assertEqual(matrix2_dp(3,5), 9999.0_dp, message= message)
        @assertEqual(matrix2_dp(3,6), 3.0_dp, message= message)

        deallocate(matrix1_dp, matrix2_dp, matrix3_dp)

      ! ---------------------------------
      ! TEST PASTE MATRIX 3D DOUBLE PRECISION

        allocate(matrix2_3d_dp(2,2,2), matrix3_3d_dp(2,2,1))

        matrix2_3d_dp = 2.0_dp
        matrix3_3d_dp = 3.0_dp

        message= 'Test paste dp: unallocated matrix1 pasted by matrix2'
        call paste(matrix1_3d_dp, matrix2_3d_dp)
        @assertEqual(matrix1_3d_dp, matrix2_3d_dp, message= message)

        message= 'Test paste dp: matrix1 pasted by matrix3'
        call paste(matrix1_3d_dp, matrix3_3d_dp)
        @assertEqual(matrix1_3d_dp(2,2,3), 3.0_dp, message= message)

        message= 'Test nodata dp: 3d matrix1 pasted by entire matrix of 5.0 in 3rd component'
        call add_nodata_slice(matrix1_3d_dp, 2, 5.0_dp)
        @assertEqual(matrix1_3d_dp(2,2,4), 5.0_dp, message= message)

        deallocate(matrix1_3d_dp, matrix2_3d_dp, matrix3_3d_dp)

      ! ---------------------------------
      ! TEST PASTE MATRIX 4D DOUBLE PRECISION

        allocate(matrix2_4d_dp(2,2,2,2), matrix3_4d_dp(2,2,2,1))

        matrix2_4d_dp = 2.0_dp
        matrix3_4d_dp = 3.0_dp

        message= 'Test paste dp: unallocated matrix1 pasted by matrix2'
        call paste(matrix1_4d_dp, matrix2_4d_dp)
        @assertEqual(matrix1_4d_dp, matrix2_4d_dp, message= message)

        message= 'Test paste dp: matrix1 pasted by matrix3'
        call paste(matrix1_4d_dp, matrix3_4d_dp)
        @assertEqual(matrix1_4d_dp(2,2,2,3), 3.0_dp, message= message)

        message= 'Test nodata dp: 4d matrix1 pasted by entire matrix of 5.0 in 4th component'
        call add_nodata_slice(matrix1_4d_dp, 2, 5.0_dp)
        @assertEqual(matrix1_4d_dp(2,2,2,4), 5.0_dp, message= message)

        deallocate(matrix1_4d_dp, matrix2_4d_dp, matrix3_4d_dp)

  end subroutine test_append_dp

  ! TEST APPEND CHARACTER
  @test
  subroutine test_append_c()

    character(256), dimension(:),   allocatable :: vector1_c, vector2_c, vector4_c
    character(256), dimension(2)                :: vector3_c
    
    character(256), dimension(:,:), allocatable :: matrix1_c, matrix2_c, matrix3_c, matrix4_c

    character(256), dimension(:,:,:), allocatable  :: matrix1_3d_c, matrix2_3d_c, matrix3_3d_c

    character(256) :: message

    ! ---------------------------------
    ! TEST APPEND CHAR
    ! ---------------------------------

      ! ---------------------------------
      ! TEST APPEND VECTOR CHAR
    
        allocate(vector2_c(4))
      
        vector2_c = 'B'
        vector3_c = 'C'

        message= 'Test append c: non-allocated vector1 appended by vector2'
        call append(vector1_c, vector2_c)
        @assertEqual(trim(vector1_c(1)), 'B', message= message)

        message= 'Test append c: vector1 appended by vector3'
        call append(vector1_c, vector3_c)
        @assertEqual(trim(vector1_c(5)), 'C', message= message)

        message= 'Test append c: vector1 appended by scalar E'
        call append(vector1_c, 'E')
        @assertEqual(trim(vector1_c(7)), 'E', message= message)

        deallocate(vector1_c)
        deallocate(vector2_c)

      ! ---------------------------------
      ! TEST APPEND MATRIX CHAR

        allocate(matrix2_c(2,2), matrix3_c(3,2), matrix4_c(2,3))

        matrix2_c = 'E'
        matrix3_c = 'C'
        matrix4_c = 'D'

        message= 'Test append c: non-allocated matrix1 appended by matrix2'
        call append(matrix1_c, matrix2_c)
        @assertEqual(trim(matrix1_c(2,2)), 'E', message= message)

        message= 'Test append c: matrix2 appended by matrix3'
        call append(matrix2_c, matrix3_c)
        @assertEqual(trim(matrix2_c(5,2)), 'C', message= message)

        message= 'Test append c: matrix2 appended by first column of matrix3, with character X'
        call append(matrix2_c, matrix3_c(:,:1), fill_value= 'X')
        @assertEqual(trim(matrix2_c(8,2)), 'X', message= message)
        @assertEqual(trim(matrix2_c(6,1)), 'C', message= message)

        message= 'Test append c: matrix2 appended by matrix4, with character Y'
        call append(matrix2_c, matrix4_c, fill_value= 'Y')
        @assertEqual(trim(matrix2_c(8,3)), 'Y', message= message)
        @assertEqual(trim(matrix2_c(9,1)), 'D', message= message)

        deallocate(matrix1_c, matrix2_c, matrix3_c, matrix4_c)

      ! ---------------------------------
      ! TEST APPEND 3D MATRIX CHAR

        allocate(matrix2_3d_c(2,2,2), matrix3_3d_c(1,2,2))

        matrix2_3d_c = 'B'
        matrix3_3d_c = 'C'

        message='Test append c: non-allocated matrix1_3d appended by matrix2_3d with filler'
        call append(matrix1_3d_c, matrix2_3d_c, fill_value='X')
        @assertEqual(trim(matrix1_3d_c(2,2,2)), 'B', message= message)

        message='Test append d: matrix2_3d appended by matrix3_3d'
        call append(matrix2_3d_c, matrix3_3d_c)
        @assertEqual(trim(matrix2_3d_c(3,2,2)), 'C', message= message)

        deallocate(matrix1_3d_c, matrix2_3d_c, matrix3_3d_c)
    
    ! ---------------------------------
    ! TEST PASTE CHAR
    ! ---------------------------------

      ! ---------------------------------
      ! TEST PASTE MATRIX-SCALAR CHAR

        message= 'Test paste c: non-allocated matrix1 pasted by char C'
        call paste(matrix1_c, 'C')
        @assertEqual(trim(matrix1_c(1,1)), 'C', message= message)

        message= 'Test paste c: matrix1 pasted by char D'
        call paste(matrix1_c, 'D')
        @assertEqual(trim(matrix1_c(1,2)), 'D', message= message)

        deallocate(matrix1_c)

      ! ---------------------------------
      ! TEST PASTE MATRIX-VECTOR CHAR

        allocate(vector1_c(1), vector2_c(3), vector4_c(2))

        vector1_c = 'A'
        vector2_c = 'B'
        vector4_c = 'C'

        message= 'Test paste c: non-allocated matrix1 pasted by vector1'
        call paste(matrix1_c, vector1_c)
        @assertEqual(trim(matrix1_c(1,1)), 'A', message= message)

        message= 'Test paste c: matrix1 pasted by vector1'
        call paste(matrix1_c, vector1_c)
        @assertEqual(trim(matrix1_c(1,2)), 'A', message= message)

        message= 'Test paste c: matrix1 (lower rows) pasted by vector2 (higher rows)'
        call paste(matrix1_c, vector2_c, fill_value= 'D')
        @assertEqual(trim(matrix1_c(3,2)), 'D', message= message)
        @assertEqual(trim(matrix1_c(1,3)), 'B', message= message)

        message= 'Test paste c: matrix1 (higher rows) pasted by vector4 (lower rows)'
        call paste(matrix1_c, vector4_c, fill_value= 'E')
        @assertEqual(trim(matrix1_c(2,4)), 'C', message= message)
        @assertEqual(trim(matrix1_c(3,4)), 'E', message= message)

        deallocate(vector1_c, vector2_c, vector4_c)
        deallocate(matrix1_c)

      ! ---------------------------------
      ! TEST PASTE MATRIX-MATRIX CHAR

        allocate(matrix2_c(2,2), matrix3_c(2,3))

        matrix2_c = 'A'
        matrix3_c = 'B'

        message= 'Test paste c: non-allocated matrix1 pasted by matrix2'
        call paste(matrix1_c, matrix2_c)
        @assertEqual(trim(matrix1_c(2,2)), 'A', message= message)

        message= 'Test paste c: matrix1 pasted by matrix3'
        call paste(matrix1_c, matrix3_c)
        @assertEqual(trim(matrix1_c(2,3)), 'B', message= message)

        deallocate(matrix2_c, matrix3_c)
        
        allocate(matrix2_c(2,2), matrix3_c(3,3) )
        
        matrix2_c = 'A'
        matrix3_c = 'B'

        message= 'Test paste c: matrix2 pasted by first row of matrix3 (less row)'
        call paste(matrix2_c, matrix3_c(:1,:), fill_value= 'C')
        @assertEqual(trim(matrix2_c(2,3)), 'C', message= message)
        @assertEqual(trim(matrix2_c(1,3)), 'B', message= message)

        message= 'Test paste c: matrix2 pasted by matrix3 (more rows)'
        call paste(matrix2_c, matrix3_c, fill_value= 'D')
        @assertEqual(trim(matrix2_c(3,5)), 'D', message= message)
        @assertEqual(trim(matrix2_c(3,6)), 'B', message= message)

        deallocate(matrix1_c, matrix2_c, matrix3_c)
  
  end subroutine test_append_c

  ! TEST APPEND LOGICAL
  @test
  subroutine test_append_lgt()
    
    logical, dimension(:),   allocatable  :: vector1_lgt, vector2_lgt, vector3_lgt
    logical, dimension(2)                 :: vector4_lgt
  
    logical, dimension(:,:), allocatable  :: matrix1_lgt, matrix2_lgt, matrix3_lgt, matrix4_lgt, matrix5_lgt
    logical, dimension(:,:), allocatable  :: mplaceholder_lgt 
  
    logical, dimension(:,:,:), allocatable  :: matrix1_3d_lgt, matrix2_3d_lgt, matrix3_3d_lgt, matrix4_3d_lgt
    logical, dimension(:,:,:), allocatable  :: matrix5_3d_lgt

    logical, dimension(:,:,:,:), allocatable  :: matrix1_4d_lgt, matrix2_4d_lgt, matrix3_4d_lgt, matrix4_4d_lgt
    logical, dimension(:,:,:,:), allocatable  :: matrix5_4d_lgt, matrix6_4d_lgt

    character(256) :: message

    ! ---------------------------------
    ! TEST APPEND
    ! ---------------------------------

      ! ---------------------------------
      ! TEST APPEND VECTOR LOGICAL

        allocate(vector2_lgt(4))
      
        vector2_lgt = .true.
        vector4_lgt = .false.
      
        message='Test append lgt: non-allocated vector1 appended by vector2'
        call append(vector1_lgt, vector2_lgt)
        @assertAll(vector1_lgt(1:4), message= message)

        message='Test append lgt: vector1 appended by vector3'
        call append(vector1_lgt, vector4_lgt)
        @assertAll(vector1_lgt(1:4), message= message)
        @assertNone(vector1_lgt(5:6), message= message)

        message='Test append lgt: vector1 appended by .true.'
        call append(vector1_lgt, .true.)
        @assertTrue(vector1_lgt(7), message= message)

        message='Test append lgt: non-allocated vector3 appended by scalar .true.'
        call append(vector3_lgt, .true.)
        @assertAll(vector3_lgt, message= message)

        deallocate(vector1_lgt)
        deallocate(vector2_lgt)
        deallocate(vector3_lgt)

      ! ---------------------------------
      ! TEST APPEND MATRIX LOGICAL

        allocate(matrix1_lgt(2,2), matrix2_lgt(3,2), matrix3_lgt(2,3), matrix5_lgt(2,2))

        matrix1_lgt = .true.
        matrix2_lgt = .false.
        matrix3_lgt = .true.
        matrix5_lgt = .false.

        message='Test append lgt: matrix1 appended by matrix2'
        call append(matrix1_lgt, matrix2_lgt)
        @assertAll(reshape(matrix1_lgt(1:2,:), (/4/)), message= message)
        @assertNone(reshape(matrix1_lgt(3:5,:), (/6/)), message= message)

        message='Test append lgt: non-allocated matrix4 appended by matrix3'
        call append(matrix4_lgt, matrix3_lgt)
        @assertAll(reshape(matrix4_lgt, (/6/)), message= message)
        @assertSameShape(shape(matrix4_lgt), shape(matrix3_lgt), message= message)

        message='Test append lgt: matrix2 (less columns) appended by matrix3 (more columns).& 
                Columns maintained with scalar fill 7_lgt'
        call append(matrix2_lgt, matrix3_lgt, fill_value= .true.)
        @assertNone(reshape(matrix2_lgt(:3,:2), (/6/)), message= message)
        @assertAll(reshape(matrix2_lgt(:3,3), (/3/)), message= message)
        @assertAll(reshape(matrix2_lgt(4:5,:), (/6/)), message= message)

        message='Test append lgt: matrix4 (more columns) appended by matrix5 (less columns).& 
                Columns maintained with scalar fill 7_lgt'
        call append(matrix4_lgt, matrix5_lgt, fill_value= .true.)
        @assertAll(reshape(matrix4_lgt(:2,:3), (/6/)), message= message)
        @assertNone(reshape(matrix4_lgt(3:4,:2), (/4/)), message= message)
        @assertAll(reshape(matrix4_lgt(3:4,3), (/2/)), message= message)

        message='Test append lgt: matrix4 appended by matrix3 along the rows, idim=1'
        call append(matrix4_lgt, matrix3_lgt, .true., 1)
        @assertAll(reshape(matrix4_lgt(5:6,3), (/2/)), message= message)

        message='Test append lgt: matrix3 appended by matrix5 along the columns, idim=2'
        call append(matrix3_lgt, matrix5_lgt, .true., 2)
        @assertAll(reshape(matrix3_lgt(:,:3), (/6/)), message= message)
        @assertNone(reshape(matrix3_lgt(:,4:5), (/4/)), message= message)

        ! To do
        ! Test append for unequal columns without filler given. Can't use this since it immediately stops subroutine.
        
        deallocate(matrix1_lgt, matrix2_lgt, matrix3_lgt, matrix4_lgt, matrix5_lgt)

      ! ---------------------------------
      ! TEST APPEND 3D MATRIX LOGICAL

        allocate(matrix2_3d_lgt(1,2,2), matrix3_3d_lgt(1,2,2), matrix4_3d_lgt(2,1,2), matrix5_3d_lgt(2,2,1))

        matrix2_3d_lgt = .true.
        matrix3_3d_lgt = .false.
        matrix4_3d_lgt = .true.
        matrix5_3d_lgt = .false.

        message='Test append lgt: non-allocated matrix1_3d appended by matrix2_3d with filler'
        call append(matrix1_3d_lgt, matrix2_3d_lgt, fill_value= .true.)
        @assertAll(reshape(matrix1_3d_lgt, (/4/)), message= message)
        @assertSameShape(shape(matrix1_3d_lgt), shape(matrix2_3d_lgt), message= message)

        message='Test append lgt: matrix2_3d appended by matrix3_3d, idim=1'
        call append(matrix2_3d_lgt, matrix3_3d_lgt, idim=1)
        @assertAll(reshape(matrix2_3d_lgt(1,:,:), (/4/)), message= message)
        @assertNone(reshape(matrix2_3d_lgt(2,:,:), (/4/)), message= message)

        message='Test append lgt: matrix2_3d appended by matrix4_3d, idim=2'
        call append(matrix2_3d_lgt, matrix4_3d_lgt, idim=2)
        @assertAll(reshape(matrix2_3d_lgt(:,3,:), (/4/)), message= message)

        message='Test append lgt: matrix1_3d appended by matrix3_3d appended by matrix5_3d, idim=3'
        call append(matrix1_3d_lgt, matrix3_3d_lgt, idim=1)
        call append(matrix1_3d_lgt, matrix5_3d_lgt, idim=3)
        @assertNone(reshape(matrix1_3d_lgt(:,:,3), (/4/)), message= message)

        deallocate(matrix1_3d_lgt, matrix2_3d_lgt, matrix3_3d_lgt, matrix4_3d_lgt, matrix5_3d_lgt)

      ! ---------------------------------
      ! TEST APPEND 4D MATRIX LOGICAL

        allocate(matrix2_4d_lgt(1,2,2,1), matrix3_4d_lgt(1,2,2,1), matrix4_4d_lgt(2,1,2,1), matrix5_4d_lgt(2,2,1,1)) 
        allocate(matrix6_4d_lgt(2,2,3,1))

        matrix2_4d_lgt = .true.
        matrix3_4d_lgt = .false.
        matrix4_4d_lgt = .true.
        matrix5_4d_lgt = .false.
        matrix6_4d_lgt = .true.

        message='Test append lgt: non-allocated matrix1_4d appended by matrix2_4d with filler'
        call append(matrix1_4d_lgt, matrix2_4d_lgt, fill_value= .true.)
        @assertAll(reshape(matrix1_4d_lgt, (/4/)), message= message)
        @assertSameShape(shape(matrix1_4d_lgt), shape(matrix2_4d_lgt), message= message)

        message='Test append lgt: matrix2_4d appended by matrix3_4d, idim=1'
        call append(matrix2_4d_lgt, matrix3_4d_lgt, idim=1)
        @assertAll(reshape(matrix2_4d_lgt(1,:,:,1), (/4/)), message= message)
        @assertNone(reshape(matrix2_4d_lgt(2,:,:,1), (/4/)), message= message)

        message='Test append lgt: matrix2_4d appended by matrix4_4d, idim=2'
        call append(matrix2_4d_lgt, matrix4_4d_lgt, idim=2)
        @assertAll(reshape(matrix2_4d_lgt(:,3,:,1), (/4/)), message= message)

        message='Test append lgt: matrix1_4d appended by matrix3_4d appended by matrix5_4d, idim=3'
        call append(matrix1_4d_lgt, matrix3_4d_lgt, idim=1)
        call append(matrix1_4d_lgt, matrix5_4d_lgt, idim=3)
        @assertNone(reshape(matrix1_4d_lgt(:,:,3,1), (/4/)), message= message)

        message='Test append lgt: matrix1_4d appended by matrix6_4d, idim=4'
        call append(matrix1_4d_lgt, matrix6_4d_lgt, idim=4)
        @assertAll(reshape(matrix1_4d_lgt(:,:,:,2), (/12/)), message= message)

        deallocate(matrix1_4d_lgt, matrix2_4d_lgt, matrix3_4d_lgt, matrix4_4d_lgt, matrix5_4d_lgt) 
        deallocate(matrix6_4d_lgt)

    ! ---------------------------------
    ! TEST PASTE LOGICAL
    ! ---------------------------------

      ! ---------------------------------
      ! TEST PASTE MATRIX-SCALAR LOGICAL

        message= 'Test paste lgt: non-allocated matrix1 pasted by .true.'
        call paste(matrix1_lgt, .true.)
        @assertEqual(matrix1_lgt, reshape((/ .true. /), (/ 1,1 /)), message= message)

        message= 'Test paste lgt: matrix1 pasted by .false.'
        call paste(matrix1_lgt, .false.)
        @assertEqual(matrix1_lgt, reshape((/ .true., .false. /), (/ 1,2 /)), message= message)

        deallocate(matrix1_lgt)

      ! ---------------------------------
      ! TEST PASTE MATRIX-VECTOR LOGICAL

        allocate(vector1_lgt(1))

        vector1_lgt = .true.

        message= 'Test paste lgt: non-allocated matrix1 pasted by vector1'
        call paste(matrix1_lgt, vector1_lgt)
        @assertEqual(matrix1_lgt, reshape((/ .true. /), (/ 1,1 /)), message= message)

        message= 'Test paste lgt: matrix1 pasted by vector1'
        call paste(matrix1_lgt, vector1_lgt)
        @assertEqual(matrix1_lgt, reshape((/ .true., .true. /), (/ 1,2 /)), message= message)

        deallocate(vector1_lgt)
        deallocate(matrix1_lgt)

      ! ---------------------------------
      ! TEST PASTE MATRIX-MATRIX LOGICAL

        allocate(matrix2_lgt(2,2), matrix3_lgt(2,3))

        matrix2_lgt = .false.
        matrix3_lgt = .true.

        message= 'Test paste lgt: non-allocated matrix1 pasted by matrix2'
        call paste(matrix1_lgt, matrix2_lgt)
        @assertEqual(matrix1_lgt,reshape((/ .false.,.false., .false.,.false. /),(/ 2,2 /)), message= message)

        message= 'Test paste lgt: matrix1 pasted by matrix3'
        allocate(mplaceholder_lgt(2,5))
        mplaceholder_lgt = reshape((/ .false.,.false.,.false.,.false., .true.,.true.,.true.,.true.,.true.,.true. /),(/ 2,5 /))
        call paste(matrix1_lgt, matrix3_lgt)
        @assertEqual(matrix1_lgt, mplaceholder_lgt, message= message)
        deallocate(mplaceholder_lgt)

        deallocate(matrix1_lgt, matrix2_lgt, matrix3_lgt)

  end subroutine test_append_lgt

end module test_mo_append