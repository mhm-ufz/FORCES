module test_mo_append
  
  use funit
  use mo_kind,   only: i4
  use mo_append, only: append, paste
  use mo_message, only: error_message

  implicit none
  
  integer(i4), dimension(:),   allocatable  :: vector1_i4, vector2_i4
  integer(i4), dimension(2)                 :: vector3_i4

  integer(i4), dimension(:,:), allocatable  :: matrix1_i4, matrix2_i4, matrix3_i4, matrix4_i4

  character(256), dimension(:),   allocatable :: vector1_c, vector2_c
  character(256), dimension(2)                :: vector3_c
  character(256), dimension(:,:), allocatable :: matrix1_c, matrix2_c, matrix3_c, matrix4_c

contains

  ! Test Append

  @test
  subroutine test_append_i4()
    
    character(256) :: message1, message2, message3, message4

    allocate(vector2_i4(4))
    allocate(matrix1_i4(2,2), matrix2_i4(3,2))
  
    vector2_i4 = 2_i4
    vector3_i4 = 3_i4
  
    matrix1_i4 = 5_i4
    matrix2_i4 = 3_i4

    message1='Test append i4 A: non-allocated vector1 appended by vector2'
    call append(vector1_i4, vector2_i4)
    @assertEqual(vector1_i4, (/ 2_i4,2_i4,2_i4,2_i4 /), message= message1)

    message2='Test append i4 B: vector1 appended by vector3'
    call append(vector1_i4, vector3_i4)
    @assertEqual(vector1_i4, (/ 2_i4,2_i4,2_i4,2_i4, 3_i4,3_i4 /), message= message2)

    message3='Test append i4 C: vector1 appended by scalar 5_i4'
    call append(vector1_i4, 5_i4)
    @assertEqual(vector1_i4, (/ 2_i4,2_i4,2_i4,2_i4, 3_i4,3_i4, 5_i4 /), message= message3)

    message4='Test append i4 D: matrix1 appended by matrix2'
    call append(matrix1_i4, matrix2_i4)
    @assertEqual(matrix1_i4, reshape((/ 5_i4,5_i4,3_i4,3_i4,3_i4, 5_i4,5_i4,3_i4,3_i4,3_i4 /),(/ 5,2 /)), message= message4)
  
    deallocate(vector1_i4)
    deallocate(vector2_i4)
    deallocate(matrix1_i4, matrix2_i4)

  end subroutine test_append_i4

  @test
  subroutine test_append_c()

    character(256) :: message1, message2, message3, message4, message5
  
    allocate(vector2_c(4))
    allocate(matrix1_c(2,2), matrix2_c(3,2))
  
    vector2_c = 'B'
    vector3_c = 'C'
  
    matrix1_c = 'E'
    matrix2_c = 'C'

    message1= 'Test append c A: non-allocated vector1 appended by vector2'
    call append(vector1_c, vector2_c)
    @assertEqual(trim(vector1_c(1)), 'B', message= message1)

    message2= 'Test append c B: vector1 appended by vector3'
    call append(vector1_c, vector3_c)
    @assertEqual(trim(vector1_c(5)), 'C', message= message2)

    message3= 'Test append c C: vector1 appended by scalar E'
    call append(vector1_c, 'E')
    @assertEqual(trim(vector1_c(7)), 'E', message= message3)

    message4= 'Test append c D: matrix1 appended by matrix2'
    call append(matrix1_c, matrix2_c)
    @assertEqual(trim(matrix1_c(3,2)), 'C', message= message4)

    message5= 'Test append c E: matrix1 appended by first column of matrix 2, with character X'
    call append(matrix1_c, matrix2_c(:,:1), fill_value= 'X')
    @assertEqual(trim(matrix1_c(7,2)), 'X', message= message5)
  
    deallocate(vector1_c)
    deallocate(vector2_c)
    deallocate(matrix1_c, matrix2_c)

  end subroutine test_append_c

  ! Test paste

  @test
  subroutine test_paste_i4()

    character(256) :: message1, message2, message3, message4
  
    allocate(matrix2_i4(2,2), matrix3_i4(2,3), matrix4_i4(1,3))

    matrix2_i4 = 5_i4
    matrix3_i4 = 3_i4
    matrix4_i4 = 2_i4

    message1= 'Test paste i4 A: non-allocated matrix1 pasted by matrix2'
    call paste(matrix1_i4, matrix2_i4)
    @assertEqual(matrix1_i4,reshape((/ 5_i4,5_i4, 5_i4,5_i4 /),(/ 2,2 /)), message= message1)

    message2= 'Test paste i4 B: matrix1 pasted by matrix3'
    call paste(matrix1_i4, matrix3_i4)
    @assertEqual(matrix1_i4, reshape((/ 5_i4,5_i4,5_i4,5_i4, 3_i4,3_i4,3_i4,3_i4,3_i4,3_i4 /),(/ 2,5 /)), message= message2)

    message3= 'Test paste i4 C: matrix4 pasted by 5_i4'
    call paste(matrix4_i4, 5_i4)
    @assertEqual(matrix4_i4(1,:), (/ 2_i4,2_i4,2_i4, 5_i4 /), message= message3)

    deallocate( matrix2_i4, matrix3_i4 )
    allocate(matrix2_i4(2,2), matrix3_i4(2,3) )
    matrix2_i4 = 5_i4
    matrix3_i4 = 3_i4

    message4= 'Test paste i4 D: matrix2 pasted by first row of matrix3'
    call paste(matrix2_i4, matrix3_i4(:1,:), fill_value= -9999_i4)
    @assertEqual(matrix2_i4(2,3), -9999_i4, message= message4)

    deallocate(matrix1_i4, matrix2_i4, matrix3_i4, matrix4_i4)
  
  end subroutine test_paste_i4

  @test
  subroutine test_paste_c()

    character(256) :: message1, message2, message3, message4
  
    allocate(matrix2_c(2,2), matrix3_c(2,3), matrix4_c(1,3))

    matrix2_c = 'E'
    matrix3_c = 'C'
    matrix4_c = 'B'

    message1= 'Test paste c A: non-allocated matrix1 pasted by matrix2'
    call paste(matrix1_c, matrix2_c)
    @assertEqual(trim(matrix1_c(1,1)), 'E', message= message1)

    message2= 'Test paste c B: matrix1 pasted by matrix3'
    call paste(matrix1_c, matrix3_c)
    @assertEqual(trim(matrix1_c(2,3)), 'C', message= message2)

    message3= 'Test paste c C: matrix4 pasted by E'
    call paste(matrix4_c, 'E')
    @assertEqual(trim(matrix4_c(1,4)), 'E', message= message3)

    message4= 'Test paste c D: matrix2 pasted by first row of matrix3, with character X'
    call paste(matrix2_c, matrix3_c(:1,:), fill_value= 'X')
    @assertEqual(trim(matrix2_c(2,3)), 'X', message= message4)

    deallocate(matrix1_c, matrix2_c, matrix3_c, matrix4_c)
  
  end subroutine test_paste_c

end module test_mo_append