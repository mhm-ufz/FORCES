module test_mo_append
  
  use funit
  use mo_kind,   only: i4
  use mo_append, only: append, paste
  use mo_message, only: error_message

  implicit none
  
  integer(i4), dimension(:),   allocatable  :: vector1_i4, vector2_i4, vector3_i4
  integer(i4), dimension(2)                 :: vector4_i4

  integer(i4), dimension(:,:), allocatable  :: matrix1_i4, matrix2_i4, matrix3_i4, matrix4_i4, matrix5_i4
  integer(i4), dimension(:,:), allocatable  :: mplaceholder_i4 

  integer(i4), dimension(:,:,:), allocatable  :: matrix1_3d_i4, matrix2_3d_i4, matrix3_3d_i4
  integer(i4), dimension(:,:,:), allocatable  :: matrixplaceholder_3d_i4 

  character(256), dimension(:),   allocatable :: vector1_c, vector2_c
  character(256), dimension(2)                :: vector3_c
  character(256), dimension(:,:), allocatable :: matrix1_c, matrix2_c, matrix3_c, matrix4_c

contains

  ! TEST APPEND INTEGER(i4)
  @test
  subroutine test_append_i4()
    
    integer(i4), dimension(:),   allocatable  :: vector1_i4, vector2_i4, vector3_i4
    integer(i4), dimension(2)                 :: vector4_i4
  
    integer(i4), dimension(:,:), allocatable  :: matrix1_i4, matrix2_i4, matrix3_i4, matrix4_i4, matrix5_i4
    integer(i4), dimension(:,:), allocatable  :: mplaceholder_i4 
  
    integer(i4), dimension(:,:,:), allocatable  :: matrix1_3d_i4, matrix2_3d_i4, matrix3_3d_i4
    integer(i4), dimension(:,:,:), allocatable  :: mplaceholder_3d_i4 
  
    character(256) :: message

    ! ---------------------------------
    ! TEST APPEND
    ! ---------------------------------

    ! ---------------------------------
    ! TEST APPEND VECTOR i4

    allocate(vector2_i4(4))
  
    vector2_i4 = 2_i4
    vector4_i4 = 3_i4
  
    message='Test append i4: non-allocated vector1 appended by vector2'
    call append(vector1_i4, vector2_i4)
    @assertEqual(vector1_i4, (/ 2_i4,2_i4,2_i4,2_i4 /), message= message)

    message='Test append i4: vector1 appended by vector3'
    call append(vector1_i4, vector4_i4)
    @assertEqual(vector1_i4, (/ 2_i4,2_i4,2_i4,2_i4, 3_i4,3_i4 /), message= message)

    message='Test append i4: vector1 appended by scalar 5_i4'
    call append(vector1_i4, 5_i4)
    @assertEqual(vector1_i4, (/ 2_i4,2_i4,2_i4,2_i4, 3_i4,3_i4, 5_i4 /), message= message)

    message='Test append i4: non-allocated vector3 appended by scalar 5_i4'
    call append(vector3_i4, 5_i4)
    @assertEqual(vector3_i4, (/ 5_i4 /), message= message)

    deallocate(vector1_i4)
    deallocate(vector2_i4)
    deallocate(vector3_i4)

    ! ---------------------------------
    ! TEST APPEND MATRIX i4

    allocate(matrix1_i4(2,2), matrix2_i4(3,2), matrix3_i4(2,3), matrix5_i4(2,2))

    matrix1_i4 = 5_i4
    matrix2_i4 = 3_i4
    matrix3_i4 = 4_i4
    matrix5_i4 = 6_i4

    message='Test append i4: matrix1 appended by matrix2'
    call append(matrix1_i4, matrix2_i4)
    @assertEqual(matrix1_i4, reshape((/ 5_i4,5_i4,3_i4,3_i4,3_i4, 5_i4,5_i4,3_i4,3_i4,3_i4 /),(/ 5,2 /)), message= message)

    message='Test append i4: non-allocated matrix4 appended by matrix3'
    call append(matrix4_i4, matrix3_i4)
    @assertEqual(matrix4_i4, reshape((/ 4_i4,4_i4, 4_i4,4_i4, 4_i4,4_i4 /), (/ 2,3 /)), message= message)

    message='Test append i4: matrix2 (less columns) appended by matrix3 (more columns). Columns maintained with scalar fill 7_i4'
    call append(matrix2_i4, matrix3_i4, 7_i4)
    allocate(mplaceholder_i4(5,3))
    mplaceholder_i4 = reshape((/ 3_i4,3_i4,3_i4,4_i4,4_i4, 3_i4,3_i4,3_i4,4_i4,4_i4, 7_i4,7_i4,7_i4,4_i4,4_i4 /), (/ 5,3 /))
    @assertEqual(matrix2_i4, mplaceholder_i4, message= message)
    deallocate(mplaceholder_i4)

    message='Test append i4: matrix4 (more columns) appended by matrix5 (less columns). Columns maintained with scalar fill 7_i4'
    call append(matrix4_i4, matrix5_i4, 7_i4)
    allocate(mplaceholder_i4(4,3))
    mplaceholder_i4 = reshape((/ 4_i4,4_i4,6_i4,6_i4, 4_i4,4_i4,6_i4,6_i4, 4_i4,4_i4,7_i4,7_i4 /), (/ 4,3 /))
    @assertEqual(matrix4_i4, mplaceholder_i4, message= message)
    deallocate(mplaceholder_i4)

    ! To do
    ! Test append for unequal columns without filler given. Can't use this since it immediately stops subroutine.
    
    deallocate(matrix1_i4, matrix2_i4, matrix3_i4, matrix4_i4, matrix5_i4)

    ! ---------------------------------
    ! TEST APPEND 3D MATRIX i4

    allocate(matrix2_3d_i4(2,2,2), matrix3_3d_i4(1,2,2))

    matrix2_3d_i4 = 2_i4
    matrix3_3d_i4 = 3_i4

    message='Test append i4: non-allocated matrix1_3d appended by matrix2_3d with filler'
    call append(matrix1_3d_i4, matrix2_3d_i4, 7_i4)
    allocate(mplaceholder_3d_i4(2,2,2))
    mplaceholder_3d_i4 = reshape((/ 2_i4,2_i4, 2_i4,2_i4,  2_i4,2_i4, 2_i4,2_i4 /), (/ 2,2,2 /))
    @assertEqual(matrix1_3d_i4, mplaceholder_3d_i4, message= message)
    deallocate(mplaceholder_3d_i4)

    message='Test append i4: matrix2_3d appended by matrix3_3d'
    call append(matrix2_3d_i4, matrix3_3d_i4)
    allocate(mplaceholder_3d_i4(3,2,2))
    mplaceholder_3d_i4 = reshape((/ 2_i4,2_i4,3_i4, 2_i4,2_i4,3_i4,  2_i4,2_i4,3_i4, 2_i4,2_i4,3_i4 /), (/ 3,2,2 /))
    @assertEqual(matrix2_3d_i4, mplaceholder_3d_i4, message= message)
    deallocate(mplaceholder_3d_i4)


    ! ---------------------------------
    ! TEST PASTE i4
  
    allocate(matrix2_i4(2,2), matrix3_i4(2,3), matrix4_i4(1,3))

    matrix2_i4 = 5_i4
    matrix3_i4 = 3_i4
    matrix4_i4 = 2_i4

    message= 'Test paste i4: non-allocated matrix1 pasted by matrix2'
    call paste(matrix1_i4, matrix2_i4)
    @assertEqual(matrix1_i4,reshape((/ 5_i4,5_i4, 5_i4,5_i4 /),(/ 2,2 /)), message= message)

    message= 'Test paste i4: matrix1 pasted by matrix3'
    call paste(matrix1_i4, matrix3_i4)
    @assertEqual(matrix1_i4, reshape((/ 5_i4,5_i4,5_i4,5_i4, 3_i4,3_i4,3_i4,3_i4,3_i4,3_i4 /),(/ 2,5 /)), message= message)

    message= 'Test paste i4: matrix4 pasted by 5_i4'
    call paste(matrix4_i4, 5_i4)
    @assertEqual(matrix4_i4(1,:), (/ 2_i4,2_i4,2_i4, 5_i4 /), message= message)

    deallocate( matrix2_i4, matrix3_i4 )
    allocate(matrix2_i4(2,2), matrix3_i4(2,3) )
    matrix2_i4 = 5_i4
    matrix3_i4 = 3_i4

    message= 'Test paste i4: matrix2 pasted by first row of matrix3'
    call paste(matrix2_i4, matrix3_i4(:1,:), fill_value= -9999_i4)
    @assertEqual(matrix2_i4(2,3), -9999_i4, message= message)

    deallocate(matrix1_i4, matrix2_i4, matrix3_i4, matrix4_i4)

  end subroutine test_append_i4

  @test
  subroutine test_append_c()

    character(256) :: message

    ! Taste append char
  
    allocate(vector2_c(4))
    allocate(matrix1_c(2,2), matrix2_c(3,2))
  
    vector2_c = 'B'
    vector3_c = 'C'
  
    matrix1_c = 'E'
    matrix2_c = 'C'

    message= 'Test append c A: non-allocated vector1 appended by vector2'
    call append(vector1_c, vector2_c)
    @assertEqual(trim(vector1_c(1)), 'B', message= message)

    message= 'Test append c B: vector1 appended by vector3'
    call append(vector1_c, vector3_c)
    @assertEqual(trim(vector1_c(5)), 'C', message= message)

    message= 'Test append c C: vector1 appended by scalar E'
    call append(vector1_c, 'E')
    @assertEqual(trim(vector1_c(7)), 'E', message= message)

    message= 'Test append c D: matrix1 appended by matrix2'
    call append(matrix1_c, matrix2_c)
    @assertEqual(trim(matrix1_c(3,2)), 'C', message= message)

    message= 'Test append c E: matrix1 appended by first column of matrix 2, with character X'
    call append(matrix1_c, matrix2_c(:,:1), fill_value= 'X')
    @assertEqual(trim(matrix1_c(7,2)), 'X', message= message)

    deallocate(vector1_c)
    deallocate(vector2_c)
    deallocate(matrix1_c, matrix2_c)
  
    ! Test paste char

    allocate(matrix2_c(2,2), matrix3_c(2,3), matrix4_c(1,3))

    matrix2_c = 'E'
    matrix3_c = 'C'
    matrix4_c = 'B'

    message= 'Test paste c A: non-allocated matrix1 pasted by matrix2'
    call paste(matrix1_c, matrix2_c)
    @assertEqual(trim(matrix1_c(1,1)), 'E', message= message)

    message= 'Test paste c B: matrix1 pasted by matrix3'
    call paste(matrix1_c, matrix3_c)
    @assertEqual(trim(matrix1_c(2,3)), 'C', message= message)

    message= 'Test paste c C: matrix4 pasted by E'
    call paste(matrix4_c, 'E')
    @assertEqual(trim(matrix4_c(1,4)), 'E', message= message)

    message= 'Test paste c D: matrix2 pasted by first row of matrix3, with character X'
    call paste(matrix2_c, matrix3_c(:1,:), fill_value= 'X')
    @assertEqual(trim(matrix2_c(2,3)), 'X', message= message)

    deallocate(matrix1_c, matrix2_c, matrix3_c, matrix4_c)
  
  end subroutine test_append_c

end module test_mo_append