module test_mo_regridder
  use funit
  use mo_grid, only: grid_t, cartesian, top_down, bottom_up
  use mo_regridder, only: regridder, up_h_mean, up_p_mean, up_min, up_max, up_sum, up_laf, up_fraction
  use mo_kind, only: i4, dp
  use mo_constants, only: nodata_dp
  use mo_utils, only: flip, flipped, is_close
  ! use mo_netcdf, only: NcDataset, NcVariable, NcDimension
  implicit none

  private

  public :: test_regrid

contains

  @test
  subroutine test_regrid()

    implicit none
    type(grid_t), target :: cgrid, fgrid
    type(regridder) :: upscaler
    ! type(NcDataset) :: nc
    ! type(NcDimension) :: x_dim, y_dim
    ! type(NcVariable) :: var
    real(dp) :: t=1.0E-5_dp
    real(dp) :: ref_val
    integer(i4) :: xt, xb, yt, yb, i
    real(dp), allocatable :: dem(:), dem_mat(:,:), cdem(:), cdem_mat(:,:), weights(:), cweights(:)
    integer(i4), allocatable :: lc(:), clc(:), lc_mat(:,:), clc_mat(:,:)
    real(dp), allocatable :: lc1(:), lc2(:), lc3(:), lcf_mat(:,:)

    call fgrid%from_ascii_file("./files/dem.asc")
    cgrid = fgrid%derive_grid(upscaling_factor=16)

    call upscaler%init(fgrid, cgrid)

    allocate(weights(fgrid%ncells))
    weights = fgrid%pack(upscaler%weights)
    allocate(cweights(cgrid%ncells))
    call upscaler%execute(weights, cweights, upscaling_operator=up_sum)
    @assertTrue(all(is_close(cweights, 1.0_dp)), message='check weights sum to 1')

    call fgrid%read_data("./files/dem.asc", dem_mat)
    call fgrid%read_data("./files/landcover.asc", lc_mat)

    ! nc = NcDataset("dem.nc", "w")
    ! call fgrid%to_netcdf(nc)
    ! x_dim = nc%getDimension("x")
    ! y_dim = nc%getDimension("y")
    ! var = nc%setVariable("dem", "f64", [x_dim, y_dim])
    ! call var%setFillValue(nodata_dp)
    ! call var%setAttribute("missing_value", nodata_dp)
    ! call var%setData(dem_mat)
    ! call nc%close()

    allocate(dem(fgrid%ncells))
    dem = fgrid%pack(dem_mat)
    allocate(cdem(cgrid%ncells))
    allocate(cdem_mat(cgrid%nx, cgrid%ny))

    ! nc = NcDataset("cdem.nc", "w")
    ! call cgrid%to_netcdf(nc)
    ! x_dim = nc%getDimension("x")
    ! y_dim = nc%getDimension("y")

    @assertEqual(cgrid%nx, 18, message='upscaling nx check')
    @assertEqual(cgrid%ny, 27, message='upscaling ny check')

    call upscaler%execute(dem, cdem)
    ! check arithmetic mean upscaling
    do i = 1, cgrid%ncells
      xb = upscaler%x_lb(i)
      xt = upscaler%x_ub(i)
      yb = upscaler%y_lb(i)
      yt = upscaler%y_ub(i)
      ! cartesian grid can use n-subcells for weights
      ref_val = sum(dem_mat(xb:xt,yb:yt), fgrid%mask(xb:xt,yb:yt)) / upscaler%n_subcells(i)
      @assertEqual(cdem(i), ref_val, tolerance=t, message='upscaling arithmetic mean check')
    end do

    ! var = nc%setVariable("dem_mean", "f64", [x_dim, y_dim])
    ! call var%setFillValue(nodata_dp)
    ! call var%setAttribute("missing_value", nodata_dp)
    ! cdem_mat = cgrid%unpack(cdem)
    ! call var%setData(cdem_mat)

    call upscaler%execute(dem, cdem, upscaling_operator=up_p_mean, p=2.1_dp)
    ! check p-mean upscaling
    do i = 1, cgrid%ncells
      xb = upscaler%x_lb(i)
      xt = upscaler%x_ub(i)
      yb = upscaler%y_lb(i)
      yt = upscaler%y_ub(i)
      ! cartesian grid can use n-subcells for weights
      ref_val = (sum(dem_mat(xb:xt,yb:yt) ** 2.1_dp, fgrid%mask(xb:xt,yb:yt)) / upscaler%n_subcells(i)) ** (1.0_dp / 2.1_dp)
      @assertEqual(cdem(i), ref_val, tolerance=t, message='upscaling p-mean check (p=2.1)')
    end do

    ! var = nc%setVariable("dem_pmean", "f64", [x_dim, y_dim])
    ! call var%setFillValue(nodata_dp)
    ! call var%setAttribute("missing_value", nodata_dp)
    ! cdem_mat = cgrid%unpack(cdem)
    ! call var%setData(cdem_mat)

    call upscaler%execute(dem, cdem, upscaling_operator=up_p_mean, p=0.0_dp)
    ! check g-mean upscaling
    do i = 1, cgrid%ncells
      xb = upscaler%x_lb(i)
      xt = upscaler%x_ub(i)
      yb = upscaler%y_lb(i)
      yt = upscaler%y_ub(i)
      ! cartesian grid can use n-subcells for weights
      ref_val = exp(sum(log(dem_mat(xb:xt,yb:yt)), fgrid%mask(xb:xt,yb:yt)) / upscaler%n_subcells(i))
      @assertEqual(cdem(i), ref_val, tolerance=t, message='upscaling geometric mean check')
    end do

    ! var = nc%setVariable("dem_gmean", "f64", [x_dim, y_dim])
    ! call var%setFillValue(nodata_dp)
    ! call var%setAttribute("missing_value", nodata_dp)
    ! cdem_mat = cgrid%unpack(cdem)
    ! call var%setData(cdem_mat)

    call upscaler%execute(dem, cdem, upscaling_operator=up_h_mean)
    ! check h-mean upscaling
    do i = 1, cgrid%ncells
      xb = upscaler%x_lb(i)
      xt = upscaler%x_ub(i)
      yb = upscaler%y_lb(i)
      yt = upscaler%y_ub(i)
      ! cartesian grid can use n-subcells for weights
      ref_val = 1.0_dp / (sum(1.0 / dem_mat(xb:xt,yb:yt), fgrid%mask(xb:xt,yb:yt)) / upscaler%n_subcells(i))
      @assertEqual(cdem(i), ref_val, tolerance=t, message='upscaling harmonic mean check')
    end do

    ! var = nc%setVariable("dem_hmean", "f64", [x_dim, y_dim])
    ! call var%setFillValue(nodata_dp)
    ! call var%setAttribute("missing_value", nodata_dp)
    ! cdem_mat = cgrid%unpack(cdem)
    ! call var%setData(cdem_mat)

    call upscaler%execute(dem, cdem, upscaling_operator=up_min)
    ! check min upscaling
    do i = 1, cgrid%ncells
      xb = upscaler%x_lb(i)
      xt = upscaler%x_ub(i)
      yb = upscaler%y_lb(i)
      yt = upscaler%y_ub(i)
      ! cartesian grid can use n-subcells for weights
      ref_val = minval(dem_mat(xb:xt,yb:yt), mask=fgrid%mask(xb:xt,yb:yt))
      @assertEqual(cdem(i), ref_val, tolerance=t, message='upscaling min check')
    end do

    ! var = nc%setVariable("dem_min", "f64", [x_dim, y_dim])
    ! call var%setFillValue(nodata_dp)
    ! call var%setAttribute("missing_value", nodata_dp)
    ! cdem_mat = cgrid%unpack(cdem)
    ! call var%setData(cdem_mat)

    call upscaler%execute(dem, cdem, upscaling_operator=up_max)
    ! check max upscaling
    do i = 1, cgrid%ncells
      xb = upscaler%x_lb(i)
      xt = upscaler%x_ub(i)
      yb = upscaler%y_lb(i)
      yt = upscaler%y_ub(i)
      ! cartesian grid can use n-subcells for weights
      ref_val = maxval(dem_mat(xb:xt,yb:yt), mask=fgrid%mask(xb:xt,yb:yt))
      @assertEqual(cdem(i), ref_val, tolerance=t, message='upscaling max check')
    end do

    ! var = nc%setVariable("dem_max", "f64", [x_dim, y_dim])
    ! call var%setFillValue(nodata_dp)
    ! call var%setAttribute("missing_value", nodata_dp)
    ! cdem_mat = cgrid%unpack(cdem)
    ! call var%setData(cdem_mat)

    allocate(lc(fgrid%ncells))
    lc = fgrid%pack(lc_mat)
    allocate(clc(cgrid%ncells))
    allocate(lc1(cgrid%ncells))
    allocate(lc2(cgrid%ncells))
    allocate(lc3(cgrid%ncells))
    call upscaler%execute(lc, clc, upscaling_operator=up_laf, vmin=1_i4, vmax=3_i4)
    call upscaler%execute(lc, lc1, upscaling_operator=up_fraction, class_id=1_i4)
    call upscaler%execute(lc, lc2, upscaling_operator=up_fraction, class_id=2_i4)
    call upscaler%execute(lc, lc3, upscaling_operator=up_fraction, class_id=3_i4)

    @assertTrue(all(is_close(lc1+lc2+lc3, 1.0_dp)), message='check fractions sum to 1')
    @assertEqual(count(clc==1)+count(clc==2)+count(clc==3), cgrid%ncells, message='check fraction counts')

    ! call nc%close()

  end subroutine test_regrid

end module test_mo_regridder
