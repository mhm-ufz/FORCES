module test_mo_xor4096

!*******************************************************
!
!   TO TEST RNGs
!
!*******************************************************

  use funit
  use mo_kind,  only: i4, i8, SP, DP
  use mo_xor4096, only: xor4096, xor4096g, n_save_state
  use mo_message, only: error_message

  implicit none

  integer(i4)                    :: ISeedSP_D0
  integer(i4), allocatable       :: ISeedSP(:)
  integer(i8), allocatable       :: ISeedDP(:)

  integer(i4)                    :: SingleIntegerRN_D0
  integer(i4), allocatable       :: SingleIntegerRN(:)
  integer(i8), allocatable       :: DoubleIntegerRN(:)
  real(SP),    allocatable       :: SingleRealRN(:)
  real(DP),    allocatable       :: DoubleRealRN(:)

  integer(i4)                    :: NumberOfStreams = 3

  character(80)                  :: CheckString, CheckStringShort
  integer(i4), allocatable       :: CheckISP_D0(:)
  integer(i4), allocatable       :: CheckISP_D1(:,:)

  ! Needed for optional versions: Single
  integer(i4), dimension(n_save_state)   :: save_state_d0
  integer(i4), dimension(3, n_save_state) :: save_state_d1_3
  integer(i4), dimension(2, n_save_state) :: save_state_d1_2
  
contains

  ! Test uniform single precision integer
  ! 1 STREAM
  @test
  subroutine test_uniform_sp_1stream()

    integer(i8)                    :: i

    ISeedSP_D0 = 3_i4
    allocate (CheckISP_D0(5))
    CheckISP_D0 = (/-1381736336,1670483215,-70622511,1980498182,-909439004/)
    do i=1,5
      call xor4096(ISeedSP_D0, SingleIntegerRN_D0)
      @assertEqual(SingleIntegerRN_D0, CheckISP_D0(i))
      ISeedSP_D0 = 0_i4
    end do
    deallocate (CheckISP_D0)
  
  end subroutine test_uniform_sp_1stream

  ! Test uniform single precision integer
  ! 3 STREAMS
  @test
  subroutine test_uniform_sp_3stream()

    integer(i8)                    :: i,j

    allocate(ISeedSP(NumberOfStreams))
    allocate(SingleIntegerRN(NumberOfStreams))

    ISeedSP = (/ 3_i4, 5_i4, 7_i4 /)
    allocate (CheckISP_D1(5, NumberOfStreams))
    CheckISP_D1(1,:) = (/-1381736336,-1632616910,739198204/)
    CheckISP_D1(2,:) = (/1670483215,28429767,1655944655/)
    CheckISP_D1(3,:) = (/-70622511,692184865,1023508511/)
    CheckISP_D1(4,:) = (/1980498182,-964703497,290140738/)
    CheckISP_D1(5,:) = (/-909439004,94001477,-1671307991/)
    do i=1,5
      call xor4096(ISeedSP, SingleIntegerRN)
      do j=1,NumberOfStreams
        @assertEqual(SingleIntegerRN(j), CheckISP_D1(i,j))
      end do
      ISeedSP = 0_i4
    end do
    deallocate (CheckISP_D1)

  end subroutine test_uniform_sp_3stream

  ! Test uniform single precision integer
  ! with Optional
  @test
  subroutine test_uniform_sp_optional()

    integer(i8)                    :: i

    ISeedSP_D0 = 3_i4
    allocate (CheckISP_D0(6))
    CheckISP_D0 = (/-1381736336,1670483215,-70622511,1980498182,-909439004,-1632616910/)
    do i=1,3
      call xor4096(ISeedSP_D0,SingleIntegerRN_D0,save_state=save_state_d0)
      @assertEqual(SingleIntegerRN_D0, CheckISP_D0(i))
      ISeedSP_D0 = 0_i4
    end do
    ! Start a new stream
    call xor4096(5_i4,SingleIntegerRN_D0)
    @assertEqual(SingleIntegerRN_D0, CheckISP_D0(6))
    ISeedSP_D0 = 0_i4
    ! Go back to the old stream
    do i=4,5
      call xor4096(ISeedSP_D0,SingleIntegerRN_D0,save_state=save_state_d0)
      @assertEqual(SingleIntegerRN_D0, CheckISP_D0(i))
      ISeedSP_D0 = 0_i4
    end do
    deallocate (CheckISP_D0)

  end subroutine test_uniform_sp_optional

  ! Test gaussian single precision
  ! 3 STREAMS and 2 STREAMS
  ! @test
  ! subroutine test_gaussian_sp()
  
  !   allocate(SingleRealRN(NumberOfStreams))

  !   print*, '3 streams'
  !   ISeedSP = (/ 3_i4, 5_i4, 7_i4 /)
  !   call xor4096g(ISeedSP,SingleRealRN, save_state=save_state_d1_3)
  !   print*, SingleRealRN
  !   ISeedSP = 0_i4
  !   call xor4096g(ISeedSP,SingleRealRN, save_state=save_state_d1_3)
  !   print*, SingleRealRN
  !   call xor4096g(ISeedSP,SingleRealRN, save_state=save_state_d1_3)
  !   print*, SingleRealRN

  !   print*, '2 streams'
  !   call xor4096g( (/ 2_i4, 37_i4 /), SingleRealRN(1:2), save_state=save_state_d1_2)
  !   print*, SingleRealRN(1:2)
  !   ISeedSP = 0_i4
  !   call xor4096g((/ 0_i4, 0_i4 /), SingleRealRN(1:2), save_state=save_state_d1_2)
  !   print*, SingleRealRN(1:2)
  !   call xor4096g((/ 0_i4, 0_i4 /), SingleRealRN(1:2), save_state=save_state_d1_2)
  !   print*, SingleRealRN(1:2)

  !   print*, 'again 3 streams'
  !   ISeedSP = (/ 3_i4, 5_i4, 7_i4 /)
  !   call xor4096g(ISeedSP,SingleRealRN, save_state=save_state_d1_3)
  !   print*, SingleRealRN
  !   ISeedSP = 0_i4
  !   call xor4096g(ISeedSP,SingleRealRN, save_state=save_state_d1_3)
  !   print*, SingleRealRN
  !   call xor4096g(ISeedSP,SingleRealRN, save_state=save_state_d1_3)
  !   print*, SingleRealRN

  !   deallocate(ISeedSP)
  !   deallocate(ISeedDP)
  !   deallocate(SingleIntegerRN)
  !   deallocate(DoubleIntegerRN)
  !   deallocate(SingleRealRN)
  !   deallocate(DoubleRealRN)

  ! end subroutine test_gaussian_sp
  
end module test_mo_xor4096