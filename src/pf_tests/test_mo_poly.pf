module test_mo_poly
  
  use funit
  use mo_kind,   only: dp, i4
  use mo_poly, only: inpoly, areapoly, center_of_mass, orientpoly, mod_pole, mod_shift

  implicit none

  real(dp), dimension(4, 2)  :: coord_dp = reshape([&
            1.0_dp,2.0_dp,2.0_dp,1.0_dp, &
            1.0_dp,1.0_dp,2.0_dp,2.0_dp], &
          shape(coord_dp))
  integer(i4)                             :: inside
  real(dp)                                :: area_dp
  real(dp),dimension(2)                   :: com_dp

contains

! Test coordinate of a point compared to polygon
  @test
  subroutine test_poly_inpoly_dp()

    call inpoly( (/1.5_dp,1.5_dp/) , coord_dp, inside)
    @assertEqual(inside, 1_i4)
    call inpoly( (/0.5_dp,1.5_dp/) , coord_dp, inside)
    @assertEqual(inside, -1_i4)
    call inpoly( (/1.5_dp,1.0_dp/) , coord_dp, inside)
    @assertEqual(inside, 0_i4)
    call inpoly( (/1.0_dp,1.5_dp/) , coord_dp, inside)
    @assertEqual(inside, 0_i4)
    call inpoly( (/1.0_dp,1.0_dp/) , coord_dp, inside)
    @assertEqual(inside, 0_i4)

  end subroutine test_poly_inpoly_dp

! Calculate area of polygon
  @test
  subroutine test_poly_area_dp()
  
    area_dp = areapoly(coord_dp)
    @assertLessThanOrEqual(abs(area_dp - 1.0_dp), tiny(1.0_dp))

  end subroutine test_poly_area_dp

! Calculate center of mass of polygon
  @test
  subroutine test_poly_com_dp()
  
    com_dp = center_of_mass(coord_dp)
    @assertLessThanOrEqual(abs(com_dp(1)- 1.5_dp), tiny(1.0_dp))
    @assertLessThanOrEqual(abs(com_dp(2)- 1.5_dp), tiny(1.0_dp))

  end subroutine test_poly_com_dp

! check for polygon orientation
  @test
  subroutine test_poly_orient()
    integer(i4) :: orientation
    real(dp), dimension(:, :), allocatable  :: coord_alt

    orientation = orientpoly(coord_dp)
    @assertEqual(orientation, -1_i4)
    ! check the reversed order coords
    orientation = orientpoly(coord_dp(size(coord_dp,1):1:-1,:))
    @assertEqual(orientation, 1_i4)

    allocate(coord_alt(4,2))
    ! check a polygon covering the north pole
    coord_alt(:,1) = [-90._dp,0._dp,90._dp,180._dp]
    coord_alt(:,2) = [0._dp,0._dp,0._dp,0._dp]
    orientation = orientpoly(coord_alt)
    @assertEqual(orientation, 0_i4)
    coord_alt(:,2) = [81._dp,82._dp,84._dp,89._dp]
    orientation = orientpoly(coord_alt)
    @assertEqual(orientation, -1_i4)
    ! check a polygon covering the south pole
    orientation = orientpoly(coord_alt(size(coord_alt,1):1:-1,:))
    @assertEqual(orientation, 1_i4)
    coord_alt(:,2) = [0._dp,0._dp,0._dp,0._dp]
    orientation = orientpoly(coord_alt)
    @assertEqual(orientation, 0_i4)
    deallocate(coord_alt)

  end subroutine test_poly_orient

! modify a polygon to allow for inpoly
  @test
  subroutine test_poly_mod()
    real(dp), dimension(:, :), allocatable  :: coord_out
    real(dp), dimension(:, :), allocatable  :: coord_alt
    real(dp), dimension(:, :), allocatable  :: coord_ref

    ! assume all valid polygons are counter-clockwise
    allocate(coord_alt(4,2))
    allocate(coord_ref(7,2))
    ! value == meridian
    coord_alt(:,1) = [-90._dp,0._dp,90._dp,180._dp]
    coord_alt(:,2) = [1._dp,2._dp,3._dp,0._dp]
    coord_ref(:,1) = [-90._dp,0._dp,90._dp,180._dp,180._dp,-180._dp,-180._dp]
    coord_ref(:,2) = [1._dp,2._dp,3._dp,0._dp,90._dp,90._dp,0._dp]
    coord_out = mod_pole(coord_alt)
    @assertEqual(coord_ref, coord_out)

    ! value == meridian and other order
    coord_alt(:,1) = [180._dp,-90._dp,0._dp,90._dp]
    coord_alt(:,2) = [0._dp,1._dp,2._dp,3._dp]
    coord_ref(:,1) = [180._dp,180._dp,-180._dp,-180._dp,-90._dp,0._dp,90._dp]
    coord_ref(:,2) = [0._dp,90._dp,90._dp,0._dp,1._dp,2._dp,3._dp]
    coord_out = mod_pole(coord_alt)
    @assertEqual(coord_ref, coord_out)

    ! value == meridian * (-1)
    coord_alt(:,1) = [-180._dp,-90._dp,0._dp,90._dp]
    coord_alt(:,2) = [0._dp,1._dp,2._dp,3._dp]
    coord_ref(:,1) = [-180._dp,-90._dp,0._dp,90._dp,180._dp,180._dp,-180._dp]
    coord_ref(:,2) = [0._dp,1._dp,2._dp,3._dp,0._dp,90._dp,90._dp]
    coord_out = mod_pole(coord_alt)
    @assertEqual(coord_ref, coord_out)

    ! value == meridian
    coord_alt(:,1) = [180._dp,90._dp,0._dp,-90._dp]
    coord_alt(:,2) = [1._dp,2._dp,3._dp,0._dp]
    coord_ref(:,1) = [180._dp,90._dp,0._dp,-90._dp,-180._dp,-180._dp,180._dp]
    coord_ref(:,2) = [1._dp,2._dp,3._dp,0._dp,1._dp,-90._dp,-90._dp]
    coord_out = mod_pole(coord_alt)
    @assertEqual(coord_ref, coord_out)

    ! value == meridian and other order
    coord_alt(:,1) = [90._dp,0._dp,-90._dp,180._dp]
    coord_alt(:,2) = [2._dp,3._dp,0._dp,1._dp]
    coord_ref(:,1) = [90._dp,0._dp,-90._dp,-180._dp,-180._dp,180._dp,180._dp]
    coord_ref(:,2) = [2._dp,3._dp,0._dp,1._dp,-90._dp,-90._dp,1._dp]
    coord_out = mod_pole(coord_alt)
    @assertEqual(coord_ref, coord_out)

    ! value == meridian * (-1)
    coord_alt(:,1) = [-180._dp,90._dp,0._dp,-90._dp]
    coord_alt(:,2) = [0._dp,1._dp,2._dp,3._dp]
    coord_ref(:,1) = [-180._dp,-180._dp,180._dp,180._dp,90._dp,0._dp,-90._dp]
    coord_ref(:,2) = [0._dp,-90._dp,-90._dp,0._dp,1._dp,2._dp,3._dp]
    coord_out = mod_pole(coord_alt)
    @assertEqual(coord_ref, coord_out)
    ! so if this test fails, then we cross the
    deallocate(coord_alt, coord_ref, coord_out)

  end subroutine test_poly_mod

  ! modify a given (longitude) value, so it avoids the sphere periodicity along a meridian
  @test
  subroutine test_poly_shift()

    @assertEqual(0._dp, mod_shift(-180._dp))
    @assertEqual(0._dp, mod_shift(180._dp))
    ! sign is compiler-dependent
    @assertEqual(180._dp, abs(mod_shift(0._dp)))
    @assertEqual(-175._dp, mod_shift(5._dp))
    @assertEqual(175._dp, mod_shift(-5._dp))

  end subroutine test_poly_shift

end module test_mo_poly