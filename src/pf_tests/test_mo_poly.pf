module test_mo_poly
  
  use funit
  use mo_kind,   only: dp, i4
  use mo_poly, only: inpoly, areapoly, center_of_mass

  implicit none

  real(dp), dimension(4, 2)  :: coord_dp = reshape([&
            1.0_dp,2.0_dp,2.0_dp,1.0_dp, &
            1.0_dp,1.0_dp,2.0_dp,2.0_dp], &
          shape(coord_dp))
  integer(i4)                             :: inside
  real(dp)                                :: area_dp
  real(dp),dimension(2)                   :: com_dp

contains

! Test coordinate of a point compared to polygon
  @test
  subroutine test_poly_inpoly_dp()

    call inpoly( (/1.5_dp,1.5_dp/) , coord_dp, inside)
    @assertEqual(inside, 1_i4)
    call inpoly( (/0.5_dp,1.5_dp/) , coord_dp, inside)
    @assertEqual(inside, -1_i4)
    call inpoly( (/1.5_dp,1.0_dp/) , coord_dp, inside)
    @assertEqual(inside, 0_i4)
    call inpoly( (/1.0_dp,1.5_dp/) , coord_dp, inside)
    @assertEqual(inside, 0_i4)
    call inpoly( (/1.0_dp,1.0_dp/) , coord_dp, inside)
    @assertEqual(inside, 0_i4)

  end subroutine test_poly_inpoly_dp

! Calculate area of polygon
  @test
  subroutine test_poly_area_dp()
  
    area_dp = areapoly(coord_dp)
    @assertLessThanOrEqual(abs(area_dp - 1.0_dp), tiny(1.0_dp))

  end subroutine test_poly_area_dp

! Calculate center of mass of polygon
  @test
  subroutine test_poly_com_dp()
  
    com_dp = center_of_mass(coord_dp)
    @assertLessThanOrEqual(abs(com_dp(1)- 1.5_dp), tiny(1.0_dp))
    @assertLessThanOrEqual(abs(com_dp(2)- 1.5_dp), tiny(1.0_dp))

  end subroutine test_poly_com_dp

end module test_mo_poly