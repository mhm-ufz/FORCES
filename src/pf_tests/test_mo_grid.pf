module test_mo_grid
  use funit
  use mo_grid, only: grid, coordsys_cart
  use mo_kind, only: i4, dp
  use mo_netcdf, only: NcDataset, NcVariable, NcDimension
  use mo_constants, only: nodata_dp
  use mo_utils, only: flip
  implicit none

  private

  public :: test_grid

contains

  @test
  subroutine test_grid()

    implicit none
    type(grid) :: cgrid, fgrid, rgrid, agrid
    type(NcDataset) :: nc
    type(NcDimension) :: x_dim, y_dim
    type(NcVariable) :: var
    real(dp) :: t=1.0E-5_dp
    integer(i4) :: i
    real(dp), allocatable :: dummyv1(:), dummyv2(:), dummyv3(:), dummy1(:,:), dummy2(:,:), dummy3(:,:)
    logical, allocatable :: mask1(:,:)

    call cgrid%init( &
      nx=2, ny=3, xllcorner=3973369.0_dp, yllcorner=2735847.0_dp, cellsize=72000.0_dp, coordsys=coordsys_cart, &
      mask=reshape([.true., .true., .true., .true., .true., .false.], [2, 3]))

    allocate(cgrid%lon(cgrid%nx, cgrid%ny))
    allocate(cgrid%lat(cgrid%nx, cgrid%ny))
    cgrid%lon(:,:) = reshape([ 5.8252_dp,  6.7885_dp,  5.7714_dp,  6.7470_dp,  5.7157_dp,  6.7042_dp], [2, 3])
    cgrid%lat(:,:) = reshape([47.9806_dp, 48.0130_dp, 48.6272_dp, 48.6600_dp, 49.2736_dp, 49.3069_dp], [2, 3])
    call cgrid%estimate_aux_vertices()

    fgrid = cgrid%derive_grid(factor_up=3)

    ! write NetCDF
    nc = NcDataset("6x9.nc", "w")
    call cgrid%to_netcdf(nc)
    x_dim = nc%getDimension("x")
    y_dim = nc%getDimension("y")
    var = nc%setVariable("test", "f64", [x_dim, y_dim])
    call var%setFillValue(nodata_dp)
    call var%setAttribute("missing_value", nodata_dp)
    call var%setAttribute("coordinates", "lat lon")
    dummyv1 = [(real(i, dp), i=1,cgrid%n_cells)]
    dummy1 = cgrid%unpack_data(dummyv1)
    call var%setData(dummy1)
    call nc%close()

    ! read NetCDF
    call rgrid%from_netcdf("6x9.nc", var="test")
    call rgrid%to_ascii_file("6x9.txt")
    call agrid%from_ascii_file("6x9.txt")

    @assertEqual(fgrid%n_cells, 45)
    @assertEqual(fgrid%nx, 6)
    @assertEqual(fgrid%ny, 9)
    @assertEqual(fgrid%xllcorner, cgrid%xllcorner, tolerance=t, message='xllcorner compare')
    @assertEqual(fgrid%yllcorner, cgrid%yllcorner, tolerance=t, message='yllcorner compare')

    @assertEqual(rgrid%n_cells, 5)
    @assertEqual(rgrid%nx, 2)
    @assertEqual(rgrid%ny, 3)
    @assertEqual(rgrid%xllcorner, cgrid%xllcorner)
    @assertEqual(rgrid%yllcorner, cgrid%yllcorner)

    @assertTrue(rgrid%has_aux_coords())
    @assertTrue(rgrid%has_aux_vertices())

    @assertEqual(rgrid%mask, agrid%mask, message='mask compare after ascii write')

    ! flipping
    mask1 = cgrid%mask
    call flip(mask1, idim=2)
    dummyv2 = cgrid%flip_packed_data(dummyv1)
    ! dummyv2 is now following a decreasing y-axis (top-to-bottom), so it is not canonical
    dummyv3 = cgrid%flip_packed_data(dummyv2, is_canonical=.false.)
    dummy2 = unpack(dummyv2, mask1, nodata_dp)
    dummy3 = dummy1
    call flip(dummy3, idim=2)
    @assertEqual(dummy2, dummy3, tolerance=t, message='check flipping data unpacked')
    @assertEqual(dummyv1, dummyv3, tolerance=t, message='check flipping data packed')

    ! @assertAll
    ! @assertAny
    ! @assertAssociated
    ! @assertEqual
    ! @assertFalse
    ! @assertGreaterThan
    ! @assertGreaterThanOrEqual
    ! @assertLessThan
    ! @assertLessThanOrEqual
    ! @assertNone
    ! @assertNotEqual
    ! @assertSameShape
    ! @assertRelativelyEqual

  end subroutine test_grid

end module test_mo_grid
