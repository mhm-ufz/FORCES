module test_mo_netcdf
  
  use funit
  use mo_kind  , only : i4, sp, dp
  use mo_netcdf, only : NcDataset, NcDimension, NcVariable
  use mo_utils , only : equal
  use mo_message, only: error_message
  
  implicit none
  
  logical                  :: correct
  integer(i4),  parameter  :: ntime=30, ny=15, nx=25, nadd=12

  character(*), parameter  :: fname="netcdf_make_check_test_file"
  character(*), parameter  :: vname_time="time", vname_lat="lat", vname_lon="lon", vname_data="data"
  character(64), dimension(3), parameter  :: waglobalnames = [character(64) :: 'Author', 'Year', 'intentionally_fail']
  ! see netcdf-fortran repo: /fortran/netcdf_constants.f90
  logical, dimension(3), parameter  :: wahasatt = [.true., .true., .false.]
  integer(i4), dimension(3), parameter  :: waglobaltype = [2_i4, 4_i4, -1_i4]
  integer(i4), dimension(3), parameter  :: wagloballen = [64_i4, 1_i4, -1_i4]
  integer(i4), dimension(3)  :: raglobaltype, ragloballen, raglobalnum
  logical, dimension(3)  :: rahasatt
  character(64), dimension(2), parameter  :: wavarnames = [character(64) :: 'units', 'scaling']
  character(64), dimension(:), allocatable  :: raglobalnames, ravarnames
  character(64)            :: wavalue, ravalue

  type(NcDataset)          :: nc
  type(NcDimension)        :: dim_x, dim_y, dim_time
  type(NcVariable)         :: var_lon, var_lat, var_time, var_data

  integer(i4)              :: wtime(ntime+nadd)
  integer(i4), allocatable :: rtime(:)
  real(sp)                 :: wlat(nx,ny), wlon(nx,ny)
  real(sp),    allocatable :: rlat(:,:),rlon(:,:)
  real(dp)                 :: wdata(nx,ny,ntime+nadd), wfvalue, rfvalue
  real(dp),    allocatable :: rdata(:,:,:)

contains

  ! ------------------------------------------
  ! 0. Initialization ...
  ! ------------------------------------------
  subroutine test_initialization()

    integer(i4)   ::  i
    
    ! generate some dummy data
    wfvalue = -9999._dp
    wavalue = "David Schaefer"
    wtime = (/ (i, i = 1, ntime+nadd ) /)
    do i=1, nx
      wlon(i,:) = real(i-0.5_sp,sp)
    end do
    do i=1, ny
      wlat(:,i) = real(i-0.5_sp,sp)
    end do
    do i=1, ntime+nadd
      wdata(:,:,i) = (wlon + wlat) * i
    end do

  end subroutine test_initialization

  ! --------------------------------------------
  ! 1. Create a file and dynamically append data
  ! --------------------------------------------
  @test
  subroutine test_netcdf_create_new()

    integer(i4)   ::  i

    ! 1.1 create a file
    nc = NcDataset(fname, "w")

    ! create dimensions
    dim_x    = nc%setDimension("x",    nx) ! lenght < 0 -> unlimited dimension
    dim_y    = nc%setDimension("y",    ny)
    dim_time = nc%setDimension("time", -1)

    ! create variables
    var_time = nc%setVariable(vname_time, "i32", (/dim_time/))
    var_lat  = nc%setVariable(vname_lat,  "f32", (/dim_x, dim_y/))
    var_lon  = nc%setVariable(vname_lon , "f32", (/dim_x, dim_y/))
    var_data = nc%setVariable(vname_data, "f64", (/dim_x, dim_y, dim_time/))

    ! add some variable attributes
    call var_time%setAttribute("units", "days since 1989-12-31 12:00:00")

    ! add some variable attributes
    call var_data%setAttribute(trim(wavarnames(1)),   "mm/d")
    call var_data%setAttribute(trim(wavarnames(2)), 0.1_dp)

    ! set fill value before any data is written
    call var_data%setFillValue(wfvalue)

    ! write data of static variables
    call var_lat%setData(wlat)
    call var_lon%setData(wlon)

    ! append data within a loop
    do i=1, ntime
      call var_time%setData(wtime(i),     start=(/i/))
      call var_data%setData(wdata(:,:,i), start=(/1,1,i/))
    end do

    ! add global attributes
    call nc%setAttribute(trim(waglobalnames(1)), wavalue)
    call nc%setAttribute(trim(waglobalnames(2)),   2099_i4)

    ! close the file
    call nc%close()
 
    ! 1.2. Read the written data
    ! --------------------------

    ! open dataset
    nc = NcDataset(fname,"r")

    ! acces the variable
    var_time = nc%getVariable(vname_time)
    var_lat  = nc%getVariable(vname_lat)
    var_lon  = nc%getVariable(vname_lon)
    var_data = nc%getVariable(vname_data)

    ! read the data
    call var_time%getData(rtime)
    call var_lat%getData(rlat)
    call var_lon%getData(rlon)
    call var_data%getData(rdata)

    ravarnames = var_data%getAttributeNames()

    ! read the fill value
    call var_data%getFillValue(rfvalue)

    ! read a global attribute
    raglobalnames = nc%getAttributeNames()

    rahasatt(1) = nc%hasAttribute(name=waglobalnames(1), xtype=raglobaltype(1), len=ragloballen(1))
    rahasatt(2) = nc%hasAttribute(name=waglobalnames(2), xtype=raglobaltype(2), len=ragloballen(2))
    rahasatt(3) = nc%hasAttribute(name=waglobalnames(3), xtype=raglobaltype(3), len=ragloballen(3))

    call nc%getAttribute(trim(waglobalnames(1)), ravalue)

    ! close dataset
    call nc%close()

    ! 1.3 Check
    ! ---------
    @assertEqual(wtime(1:ntime), rtime)
    @assertEqual(wlat, rlat)
    @assertEqual(wlon, rlon)
    @assertEqual(wdata(:,:,1:ntime), rdata)
    @assertEqual(rfvalue, rfvalue)
    @assertEqual(wavalue, ravalue)
    do i=1, size(wavarnames)
      @assertEqual(wavarnames(i), ravarnames(i))
    end do
    do i=1, size(waglobalnames)
      @assertEqual(wahasatt(i), rahasatt(i))
      if (rahasatt(i)) then
        @assertEqual(waglobalnames(i), raglobalnames(i))
        @assertEqual(waglobaltype(i), raglobaltype(i))
        @assertEqual(wagloballen(i), ragloballen(i))
      end if
    end do

  end subroutine test_netcdf_create_new

  ! --------------------------------
  ! 2. Append to an existing dataset
  ! --------------------------------
  @test
  subroutine test_netcdf_append()
  
    integer(i4)   ::  i

    !
    ! 2.1 Write data
    ! --------------
    !
    ! open dataset
    nc = NcDataset(fname,"a")

    ! acces variable
    var_time = nc%getVariable(vname_time)
    var_data = nc%getVariable(vname_data)

    ! append data within a loop
    do i=ntime+1, ntime+nadd
      call var_time%setData(wtime(i),     start=(/i/))
      call var_data%setData(wdata(:,:,i), start=(/1,1,i/))
    end do

    ! close dataset
    call nc%close()

    ! 2.2 Read the appended data
    ! ---------------------------
    !
    ! open dataset
    nc = NcDataset(fname,"r")

    ! acces the variable
    var_time = nc%getVariable(vname_time)
    var_data = nc%getVariable(vname_data)

    ! read the appended chunk of data
    call var_time%getData(rtime, start=(/ntime+1/), cnt=(/nadd/))
    call var_data%getData(rdata, start=(/1,1,ntime+1/), cnt=(/nx,ny,nadd/))

    ! close dataset
    call nc%close()

    ! 2.3 Check
    ! ---------
    @assertEqual(wtime(ntime+1:ntime+nadd), rtime(1:nadd))
    @assertEqual(wdata(:,:,ntime+1:ntime+nadd), rdata(:,:,1:nadd))

  end subroutine test_netcdf_append

  ! ----------------------------------
  ! 3. Dump some data - the short form
  ! ----------------------------------
  @test
  subroutine test_netcdf_dump()
  
    ! 3.1 Write data

    ! Fast dump
    ! open a file
    nc = NcDataset(fname, "w")

    ! create variable and dimensions
    var_data = nc%setVariable(vname_data, "f64", (/ &
        nc%setDimension("x", size(wdata,1)),       &
        nc%setDimension("y", size(wdata,2)),       &
        nc%setDimension("time", -1) /)             &
        )

    ! write data
    call var_data%setData(wdata)

    ! close the file
    call nc%close()


    ! Fast dump with additional time dimension
    ! open a file
    nc = NcDataset(fname, "w")

    ! create variable and dimensions
    dim_time = nc%setDimension("time", -1)
    var_time = nc%setVariable(vname_time, "i32", (/dim_time/))
    var_data = nc%setVariable(vname_data, "f64", (/ &
        nc%setDimension("x", nx),              &
        nc%setDimension("y", ny),              &
        dim_time /)      &
        )

    ! write data
    call var_time%setData(wtime)
    call var_data%setData(wdata)

    ! close the file
    call nc%close()


    ! 3.2 Read the dumped data
    ! --------------------------
    ! open dataset
    nc = NcDataset(fname,"r")

    ! ! acces the variable
    var_time = nc%getVariable(vname_time)
    var_data = nc%getVariable(vname_data)

    ! read the data
    call var_time%getData(rtime)
    call var_data%getData(rdata)

    ! close dataset
    call nc%close()

    ! 3.3 check
    ! ---------
    @assertEqual(wtime, rtime)
    @assertEqual(wdata, rdata)

  end subroutine test_netcdf_dump

end module test_mo_netcdf