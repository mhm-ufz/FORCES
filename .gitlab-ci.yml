# to use the env-var "GIT_CLONE_PATH", set the following in
# ./gitlab-runner/config.toml under [[runners]]:
#   [runners.custom_build_dir]
#     enabled = true
# This will prevent git clone conflicts for jobs ran in parallel

variables:
  GIT_DEPTH: 10
  GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_RUNNER_SHORT_TOKEN/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME/$CI_JOB_NAME/$CI_CONCURRENT_ID
  MAKE_FLAGS: -j 4

stages:
  - info
  - test
  - deploy

show-env-vars:
  stage: info
  variables:
    SEP: "##################################################################"
    S00: "commit date - "
    S01: "project: ${CI_PROJECT_PATH}"
    S02: "branch: ${CI_COMMIT_REF_NAME}"
    S03: "commit: ${CI_COMMIT_SHA}"
    S04: "commit msg: ${CI_COMMIT_MESSAGE}"
    S05: "clone base path: "
    S06: "runner token: ${CI_RUNNER_SHORT_TOKEN}"
  script:
    - echo -e "${SEP}\n${S00}$(date)\n${SEP}\n${S01}\n${S02}\n${S03}\n${S04}\n${SEP}\n${S05}${GIT_CLONE_PATH}\n${S06}\n${SEP}"

documentation:
  stage: test
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_RUNNER_SHORT_TOKEN/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME/$CI_JOB_NAME
    GIT_FETCH_EXTRA_FLAGS: --all --no-tags --prune --quiet
  script:
    - source hpc-module-loads/eve.chs-conda01
    - module load GCCcore/9.3.0 texlive/2020
    # use doxygen from the chs conda environment
    - doxygen doc/doxygen.config > doxygen_log_dev.txt
    # create pdf documentation
    - cd latex/ && make > ../doxygen_latex_dev.txt
    - cp refman.pdf ../html/forces_doc.pdf
    - cp refman.pdf ../forces_doc_dev.pdf
    - cd .. && mv html html_dev
    - mv doxygen_warn.txt doxygen_warn_dev.txt
  artifacts:
    name: "$CI_COMMIT_REF_NAME"
    paths:
      - html_dev
      - forces_doc_dev.pdf
      - doxygen_log_dev.txt
      - doxygen_latex_dev.txt
      - doxygen_warn_dev.txt
  when: always

documentation_stable:
  only:
    - develop
  stage: test
  variables:
    GIT_DEPTH: 0
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_RUNNER_SHORT_TOKEN/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME/$CI_JOB_NAME
    GIT_FETCH_EXTRA_FLAGS: --all --no-tags --prune --quiet
  script:
    - source hpc-module-loads/eve.chs-conda01
    - module load GCCcore/9.3.0 texlive/2020
    # use doxygen from the chs conda environment
    # doc for latest version tag
    - git checkout $(git describe --match "v*" --abbrev=0 --tags $(git rev-list --tags --max-count=1))
    - doxygen doc/doxygen.config > doxygen_log_tag.txt
    - cd latex/ && make > ../doxygen_latex_tag.txt
    - cp refman.pdf ../html/forces_doc.pdf
    - cp refman.pdf ../forces_doc_tag.pdf
    - cd .. && mv html html_tag
    - mv doxygen_warn.txt doxygen_warn_tag.txt
  artifacts:
    name: "$CI_COMMIT_REF_NAME"
    paths:
      - html_tag
      - forces_doc_tag.pdf
      - doxygen_log_tag.txt
      - doxygen_latex_tag.txt
      - doxygen_warn_tag.txt
  when: always

# how the job build directory is erected
.setup_build: &setup_build_dir
  - rm -rf $BUILD_DIR
  - mkdir -p $BUILD_DIR
  - cd $BUILD_DIR

# make command
.make: &make
  - make $MAKE_FLAGS

# make test command
.make_test: &make_test
  - make $MAKE_FLAGS test

# make coverage command
.make_coverage: &make_coverage
  - make $MAKE_FLAGS coverage

# cleanup after scripts
.cleanup: &cleanup
  - cd -

# waiting on https://gitlab.com/groups/gitlab-org/-/epics/3589
# until this is fixed, we need to additionally set the CMAKE_FLAGS in the jobs as the expansion does not work
# debug variables
.debug_vars: &debug_vars
  BUILD_DIR: build_debug
  CMAKE_FLAGS: '$CMAKE_FLAGS -DBUILD_TESTING=ON -DCMAKE_BUILD_TYPE=Debug'

# release variables
.release_vars: &release_vars
  BUILD_DIR: build_release
  CMAKE_FLAGS: '$CMAKE_FLAGS -DBUILD_TESTING=ON -DCMAKE_BUILD_TYPE=Release'

# coverage variables
.coverage_vars: &coverage_vars
  BUILD_DIR: build_debug
  CMAKE_FLAGS: '$CMAKE_FLAGS -DBUILD_TESTING=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_WITH_COVERAGE=ON'

# #################
# ### TEMPLATES ###
# #################

# template for test jobs
.test_template: &test_template
  stage: test
  script:
    - source $MODULE_LOAD_SCRIPT
    - *setup_build_dir
    - cmake $CMAKE_FLAGS ..
    - *make
    - *make_test
    - *cleanup
  artifacts:
    when: always
    paths:
    - $BUILD_DIR/Testing/Temporary

# template for coverage jobs
.coverage_template: &coverage_template
  stage: test
  script:
    - source $MODULE_LOAD_SCRIPT
    - *setup_build_dir
    - cmake $CMAKE_FLAGS ..
    - *make
    - *make_coverage
    - *cleanup
  artifacts:
    when: always
    paths:
    - $BUILD_DIR/coverage

# ##################
# ### BUILD JOBS ###
# ##################

# ######################
# ### ANALYTICS JOBS ###
# #####################

# #################
# ### TEST JOBS ###
# #################

# # NAG fails on lightweight_lib
# test-nag62-debug:
#   needs:
#     - job: build-nag62-debug
#       artifacts: true
#   variables:
#     <<: *debug_vars
#     MODULE_LOAD_SCRIPT: hpc-module-loads/eve.nagfor62
#     CMAKE_FLAGS: '-DCMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX=64 -DCMAKE_BUILD_TYPE=Debug'
#   <<: *test_template

test-nag62-release:
  variables:
    <<: *release_vars
    MODULE_LOAD_SCRIPT: hpc-module-loads/eve.nagfor62
    CMAKE_FLAGS: '-DBUILD_TESTING=ON -DCMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX=64 -DCMAKE_BUILD_TYPE=Release'
  <<: *test_template

test-gfortran83MPI-release:
  variables:
    <<: *release_vars
    MODULE_LOAD_SCRIPT: hpc-module-loads/eve.gfortran83MPI
    CMAKE_FLAGS: '-DBUILD_TESTING=ON -DCMAKE_BUILD_TYPE=Release'
  <<: *test_template

test-gfortran83MPI-debug:
  variables:
    <<: *debug_vars
    MODULE_LOAD_SCRIPT: hpc-module-loads/eve.gfortran83MPI
    CMAKE_FLAGS: '-DBUILD_TESTING=ON -DCMAKE_BUILD_TYPE=Debug'
  <<: *test_template

test-gfortran102MPI-release:
  variables:
    <<: *release_vars
    MODULE_LOAD_SCRIPT: hpc-module-loads/eve.gfortran102MPI
    CMAKE_FLAGS: '-DBUILD_TESTING=ON -DCMAKE_BUILD_TYPE=Release'
  <<: *test_template

test-gfortran102MPI-debug:
  variables:
    <<: *debug_vars
    MODULE_LOAD_SCRIPT: hpc-module-loads/eve.gfortran102MPI
    CMAKE_FLAGS: '-DBUILD_TESTING=ON -DCMAKE_BUILD_TYPE=Debug'
  <<: *test_template

test-gfortran73MPI-release:
  variables:
    <<: *release_vars
    MODULE_LOAD_SCRIPT: hpc-module-loads/eve.gfortran73MPI
    CMAKE_FLAGS: '-DBUILD_TESTING=ON -DCMAKE_BUILD_TYPE=Release'
  <<: *test_template

test-gfortran73MPI-debug:
  variables:
    <<: *debug_vars
    MODULE_LOAD_SCRIPT: hpc-module-loads/eve.gfortran73MPI
    CMAKE_FLAGS: '-DBUILD_TESTING=ON -DCMAKE_BUILD_TYPE=Debug'
  <<: *test_template

test-intel18-release:
  variables:
    <<: *release_vars
    MODULE_LOAD_SCRIPT: hpc-module-loads/eve.intel18
    CMAKE_FLAGS: '-DBUILD_TESTING=ON -DCMAKE_BUILD_TYPE=Release'
  <<: *test_template

# # intel18debug takes ages for test_mcmc
# test-intel18-debug:
#   variables:
#     <<: *debug_vars
#     MODULE_LOAD_SCRIPT: hpc-module-loads/eve.intel18
#     CMAKE_FLAGS: '-DBUILD_TESTING=ON -DCMAKE_BUILD_TYPE=Debug'
#   <<: *test_template

test-intel19-release:
  variables:
    <<: *release_vars
    MODULE_LOAD_SCRIPT: hpc-module-loads/eve.intel19
    CMAKE_FLAGS: '-DBUILD_TESTING=ON -DCMAKE_BUILD_TYPE=Release'
  <<: *test_template

test-intel19MPI-release:
  variables:
    <<: *release_vars
    MODULE_LOAD_SCRIPT: hpc-module-loads/eve.intel19MPI
    CMAKE_FLAGS: '-DBUILD_TESTING=ON -DCMAKE_BUILD_TYPE=Release'
  <<: *test_template

test-intel2020b-release:
  variables:
    <<: *release_vars
    MODULE_LOAD_SCRIPT: hpc-module-loads/eve.intel2020b
    CMAKE_FLAGS: '-DBUILD_TESTING=ON -DCMAKE_BUILD_TYPE=Release'
  <<: *test_template

coverage:
  variables:
    <<: *debug_vars
    <<: *coverage_vars
    MODULE_LOAD_SCRIPT: hpc-module-loads/eve.chs-conda01
    CMAKE_FLAGS: '-DBUILD_TESTING=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_WITH_COVERAGE=ON'
  <<: *coverage_template

# ###################
# ### DEPLOY JOBS ###
# ###################

pages:
  when: always
  only:
    - develop
  stage: deploy
  needs:
    - job: documentation_stable
      artifacts: true
    - job: documentation
      artifacts: true
    - job: coverage
      artifacts: true
  script:
    # create public dir (remove if already present)
    - test -d public && rm -rf public
    - mkdir -p public
    # create the subdir
    - mkdir public/stable/
    - mkdir public/latest/
    # copy the doxygen generated html page to the public site
    - cp html_tag/* public/stable/ -R
    - cp html_dev/* public/latest/ -R
    # create an index.html that redirects to the master documentation (in master folder)
    - cp doc/html_files/index.html public/
    # create the coverage site
    - mkdir -p public/coverage
    - cp  build_debug/coverage/* public/coverage/ -R
  artifacts:
    name: "$CI_COMMIT_REF_NAME"
    paths:
      - public
