# to use the env-var "GIT_CLONE_PATH", set the following in
# ./gitlab-runner/config.toml under [[runners]]:
#   [runners.custom_build_dir]
#     enabled = true
# This will prevent git clone conflicts for jobs ran in parallel

variables:
  GIT_DEPTH: 10
  GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_RUNNER_SHORT_TOKEN/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME/$CI_JOB_NAME/$CI_CONCURRENT_ID
  MAKE_FLAGS: -j 4

stages:
  - info
  - test
  - deploy

show-env-vars:
  stage: info
  variables:
    SEP: "##################################################################"
    S00: "commit date - "
    S01: "project: ${CI_PROJECT_PATH}"
    S02: "branch: ${CI_COMMIT_REF_NAME}"
    S03: "commit: ${CI_COMMIT_SHA}"
    S04: "commit msg: ${CI_COMMIT_MESSAGE}"
    S05: "clone base path: "
    S06: "runner token: ${CI_RUNNER_SHORT_TOKEN}"
  script:
    - echo -e "${SEP}\n${S00}$(date)\n${SEP}\n${S01}\n${S02}\n${S03}\n${S04}\n${SEP}\n${S05}${GIT_CLONE_PATH}\n${S06}\n${SEP}"

documentation:
  stage: test
  script:
    - source hpc-module-loads/eve.chs-conda01
    - module load GCCcore/9.3.0 texlive/2020
    # use doxygen from the chs conda environment
    - export PROJECT_NUMBER="$(cat version.txt)"
    - doxygen doc/doxygen.config > doxygen_log_dev.txt
    # create pdf documentation
    - cd latex/ && make > ../doxygen_latex_dev.txt
    - cp refman.pdf ../html/forces_doc.pdf
    - cp refman.pdf ../forces_doc_dev.pdf
    - cd .. && mv html html_dev
    - mv doxygen_warn.txt doxygen_warn_dev.txt
  artifacts:
    name: "$CI_COMMIT_REF_NAME"
    paths:
      - html_dev
      - forces_doc_dev.pdf
      - doxygen_log_dev.txt
      - doxygen_latex_dev.txt
      - doxygen_warn_dev.txt
  when: always

documentation_stable:
  only:
    - main
  stage: test
  variables:
    GIT_DEPTH: 0
  script:
    - source hpc-module-loads/eve.chs-conda01
    - module load GCCcore/9.3.0 texlive/2020
    # use doxygen from the chs conda environment
    # doc for latest version tag
    - git checkout $(git describe --match "v*" --abbrev=0 --tags $(git rev-list --tags --max-count=1))
    - export PROJECT_NUMBER="$(cat version.txt)"
    - doxygen doc/doxygen.config > doxygen_log_tag.txt
    - cd latex/ && make > ../doxygen_latex_tag.txt
    - cp refman.pdf ../html/forces_doc.pdf
    - cp refman.pdf ../forces_doc_tag.pdf
    - cd .. && mv html html_tag
    - mv doxygen_warn.txt doxygen_warn_tag.txt
  artifacts:
    name: "$CI_COMMIT_REF_NAME"
    paths:
      - html_tag
      - forces_doc_tag.pdf
      - doxygen_log_tag.txt
      - doxygen_latex_tag.txt
      - doxygen_warn_tag.txt
  when: always

# debug variables
.debug_vars: &debug_vars
  BUILD_DIR: build_debug
  CMAKE_FLAGS: '-DBUILD_TESTING=ON -DCMAKE_BUILD_TYPE=Debug'
  BUILD_TARGET: test
  ARTIFACT_PATH: Testing/Temporary

# release variables
.release_vars: &release_vars
  BUILD_DIR: build_release
  CMAKE_FLAGS: '-DBUILD_TESTING=ON -DCMAKE_BUILD_TYPE=Release'
  BUILD_TARGET: test
  ARTIFACT_PATH: Testing/Temporary

# coverage variables
.coverage_vars: &coverage_vars
  BUILD_DIR: build_debug
  CMAKE_FLAGS: '-DBUILD_TESTING=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_WITH_COVERAGE=ON'
  BUILD_TARGET: coverage
  ARTIFACT_PATH: coverage

# module loads for intel fortran compiler
.intel_vars_18: &intel_vars_18
  MODULE_LOAD_SCRIPT: hpc-module-loads/eve.intel18
.intel_vars_19: &intel_vars_19
  MODULE_LOAD_SCRIPT: hpc-module-loads/eve.intel19
.intel_vars_19MPI: &intel_vars_19MPI
  MODULE_LOAD_SCRIPT: hpc-module-loads/eve.intel19MPI
.intel_vars_2020b: &intel_vars_2020b
  MODULE_LOAD_SCRIPT: hpc-module-loads/eve.intel2020b

# module loads for gfortran compiler
.gnu_vars_73MPI: &gfortran_vars_73MPI
  MODULE_LOAD_SCRIPT: hpc-module-loads/eve.gfortran73MPI
.gnu_vars_83MPI: &gfortran_vars_83MPI
  MODULE_LOAD_SCRIPT: hpc-module-loads/eve.gfortran83MPI
.gnu_vars_102MPI: &gfortran_vars_102MPI
  MODULE_LOAD_SCRIPT: hpc-module-loads/eve.gfortran102MPI

# module loads for nag fortran compiler
.nag_vars_62: &nag_vars_62
  MODULE_LOAD_SCRIPT: hpc-module-loads/eve.nagfor62

# module loads for nag fortran compiler
.conda_vars_01: &conda_vars_01
  MODULE_LOAD_SCRIPT: hpc-module-loads/eve.chs-conda01

# #################
# ### TEMPLATES ###
# #################

# template for test jobs
.job_template: &job_template
  stage: test
  script:
    - source $MODULE_LOAD_SCRIPT
    - cmake -B $BUILD_DIR $CMAKE_FLAGS
    - cmake --build $BUILD_DIR --parallel
    - cmake --build $BUILD_DIR --parallel --target $BUILD_TARGET
  artifacts:
    when: always
    paths:
    - $BUILD_DIR/$ARTIFACT_PATH


# ##################
# ### BUILD JOBS ###
# ##################

# ######################
# ### ANALYTICS JOBS ###
# #####################

# #################
# ### TEST JOBS ###
# #################

# # NAG fails on forces
# test-nag62-debug:
#   variables:
#     <<: [*debug_vars, *nag_vars_62]
#   <<: *job_template

test-nag62-release:
  variables:
    <<: [*release_vars, *nag_vars_62]
  <<: *job_template

test-gfortran83MPI-debug:
  variables:
    <<: [*debug_vars, *gfortran_vars_83MPI]
  <<: *job_template

test-gfortran83MPI-release:
  variables:
    <<: [*release_vars, *gfortran_vars_83MPI]
  <<: *job_template

test-gfortran102MPI-release:
  variables:
    <<: [*release_vars, *gfortran_vars_102MPI]
  <<: *job_template

test-gfortran102MPI-debug:
  variables:
    <<: [*debug_vars, *gfortran_vars_102MPI]
  <<: *job_template

test-gfortran73MPI-release:
  variables:
    <<: [*release_vars, *gfortran_vars_73MPI]
  <<: *job_template

test-gfortran73MPI-debug:
  variables:
    <<: [*debug_vars, *gfortran_vars_83MPI]
  <<: *job_template

test-intel18-release:
  variables:
    <<: [*release_vars, *intel_vars_18]
  <<: *job_template

# # intel18debug takes ages for test_mcmc
# test-intel18-debug:
#   variables:
#    <<: [*debug_vars, *intel_vars_18]
#   <<: *job_template

test-intel19-release:
  variables:
    <<: [*release_vars, *intel_vars_19]
  <<: *job_template

test-intel19MPI-release:
  variables:
    <<: [*release_vars, *intel_vars_19MPI]
  <<: *job_template

test-intel2020b-release:
  variables:
    <<: [*release_vars, *intel_vars_2020b]
  <<: *job_template

coverage:
  variables:
    <<: [*coverage_vars, *conda_vars_01]
  <<: *job_template

# ###################
# ### DEPLOY JOBS ###
# ###################

pages:
  when: always
  only:
    - main
  stage: deploy
  needs:
    - job: documentation_stable
      artifacts: true
    - job: documentation
      artifacts: true
    - job: coverage
      artifacts: true
  script:
    # create public dir (remove if already present)
    - test -d public && rm -rf public
    - mkdir -p public
    # create the subdir
    - mkdir public/stable/
    - mkdir public/latest/
    # copy the doxygen generated html page to the public site
    - cp html_tag/* public/stable/ -R
    - cp html_dev/* public/latest/ -R
    # create an index.html that redirects to the stable documentation (in stable folder)
    - cp doc/html_files/index.html public/
    # create the coverage site
    - mkdir -p public/coverage
    - cp  build_debug/coverage/* public/coverage/ -R
  artifacts:
    name: "$CI_COMMIT_REF_NAME"
    paths:
      - public
